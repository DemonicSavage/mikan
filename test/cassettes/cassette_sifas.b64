{"version": 1, "interactions": [{"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/cards/?page=2", "body": null, "headers": {}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 07:29:16 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=lZ2GE9NktQ88Mex1LmzH%2B9WBZTNVfe%2FwKG9cGWTB%2B704LDP9ykzl8MXBr9Oboed7GnTb9FUPN3htbrLSq4si28Metf9p%2BRzIffGTjG8fIWtYuf4L2zmWZwH9\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d9237b4b011af4-GRU"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">Cards list | All Stars | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">All the cards! Search by title, title (idolized), skill name, visual description, details, id, ... and filter by idol / unit / subunit, rarity, attribute, role, skill, affects, ability (passive), affects, ability (show), affects, version to find all the details you need about the cards from Love Live!. -- Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-allstars/card_list_ajax list-page-title list-page-title-allstars/card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#ALLSTARS\">\n      All Stars\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    Cards list\n    \n    \n</h1>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"row items list-items-allstars/card\" id=\"allstars/card-page-2\" data-page-number=\"2\">\n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"919\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/\" data-ajax-url=\"/ajax/allstars/card/919/\" data-ajax-title=\"SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-JDq9zz.png\"  alt=\"SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-2G5Utv.png\"  alt=\"SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Lanzhu Zhong  <img src=\"//i.idol.st/static/img/i_allstars_attribute/1.png?0.8-subunits\" alt=\"Pure\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/2.png?0.8-subunits\" alt=\"SP\" height=\"30\"> <br><small class=\"text-muted\">I&#39;ll Eat Them One by One!</small><br><small class=\"text-muted\">\ud83c\udfb5 Miracle STAY TUNE!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/919/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=919&amp;allstarscard_unicode=SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-RJRPmv.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-04Ipqt.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=919&amp;allstarscard_unicode=SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-RJRPmv.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"918\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/918/UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia/\" data-ajax-url=\"/ajax/allstars/card/918/\" data-ajax-title=\"UR Konoe Kanata \u300cLook at Her! She&#39;s So Adorable! / Dream Utopia\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/918UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia-cySZ1r.png\"  alt=\"UR Konoe Kanata \u300cLook at Her! She&#39;s So Adorable! / Dream Utopia\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/918UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia-Hkz6j1.png\"  alt=\"UR Konoe Kanata \u300cLook at Her! She&#39;s So Adorable! / Dream Utopia\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Konoe Kanata  <img src=\"//i.idol.st/static/img/i_allstars_attribute/4.png?0.8-subunits\" alt=\"Natural\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/3.png?0.8-subunits\" alt=\"Skill\" height=\"30\"> <br><small class=\"text-muted\">Look at Her! She&#39;s So Adorable!</small><br><small class=\"text-muted\">Dream Utopia</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/918/UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/918/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=918&amp;allstarscard_unicode=UR Konoe Kanata \u300cLook at Her! She&#39;s So Adorable! / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/918/UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/918UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia-9X1z7Y.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/918UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia-gukeiC.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=918&amp;allstarscard_unicode=UR Konoe Kanata \u300cLook at Her! She&#39;s So Adorable! / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/918/UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/918UR-Konoe-Kanata-Look-at-Her-She-s-So-Adorable-Dream-Utopia-9X1z7Y.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"917\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/917/SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE/\" data-ajax-url=\"/ajax/allstars/card/917/\" data-ajax-title=\"SR Osaka Shizuku \u300cHow about a Movie or Something? / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/917SR-Osaka-Shizuku-\u6620\u753b\u3067\u3082\u3069\u3046\u3067\u3059\u304b-Miracle-STAY-TUNE-PlWMgt.png\"  alt=\"SR Osaka Shizuku \u300cHow about a Movie or Something? / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/917SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE-0Vgsng.png\"  alt=\"SR Osaka Shizuku \u300cHow about a Movie or Something? / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Osaka Shizuku  <img src=\"//i.idol.st/static/img/i_allstars_attribute/3.png?0.8-subunits\" alt=\"Elegant\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/0.png?0.8-subunits\" alt=\"Guard\" height=\"30\"> <br><small class=\"text-muted\">How about a Movie or Something?</small><br><small class=\"text-muted\">\ud83c\udfb5 Miracle STAY TUNE!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/917/SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/917/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=917&amp;allstarscard_unicode=SR Osaka Shizuku \u300cHow about a Movie or Something? / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/917/SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/917SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE-CWtyT3.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/917SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE-MYjHAU.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=917&amp;allstarscard_unicode=SR Osaka Shizuku \u300cHow about a Movie or Something? / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/917/SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/917SR-Osaka-Shizuku-How-about-a-Movie-or-Something-Miracle-STAY-TUNE-CWtyT3.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"916\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/916/UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia/\" data-ajax-url=\"/ajax/allstars/card/916/\" data-ajax-title=\"UR Watanabe You \u300cYes!!! I&#39;m the Champion! / Dream Utopia\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/916UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia-6AuWZ1.png\"  alt=\"UR Watanabe You \u300cYes!!! I&#39;m the Champion! / Dream Utopia\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/916UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia-tftzxh.png\"  alt=\"UR Watanabe You \u300cYes!!! I&#39;m the Champion! / Dream Utopia\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Watanabe You  <img src=\"//i.idol.st/static/img/i_allstars_attribute/2.png?0.8-subunits\" alt=\"Cool\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/2.png?0.8-subunits\" alt=\"SP\" height=\"30\"> <br><small class=\"text-muted\">Yes!!! I&#39;m the Champion!</small><br><small class=\"text-muted\">Dream Utopia</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/916/UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/916/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=916&amp;allstarscard_unicode=UR Watanabe You \u300cYes!!! I&#39;m the Champion! / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/916/UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/916UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia-gYdyR9.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/916UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia-R50JNi.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=916&amp;allstarscard_unicode=UR Watanabe You \u300cYes!!! I&#39;m the Champion! / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/916/UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/916UR-Watanabe-You-Yes-I-m-the-Champion-Dream-Utopia-gYdyR9.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"915\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/915/UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia/\" data-ajax-url=\"/ajax/allstars/card/915/\" data-ajax-title=\"UR Yazawa Nico \u300cThere&#39;s No Way I&#39;m Going to Lose... / Dream Utopia\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/915UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia-wcMy5a.png\"  alt=\"UR Yazawa Nico \u300cThere&#39;s No Way I&#39;m Going to Lose... / Dream Utopia\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/915UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia-CtslbW.png\"  alt=\"UR Yazawa Nico \u300cThere&#39;s No Way I&#39;m Going to Lose... / Dream Utopia\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Yazawa Nico  <img src=\"//i.idol.st/static/img/i_allstars_attribute/0.png?0.8-subunits\" alt=\"Smile\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/1.png?0.8-subunits\" alt=\"Voltage\" height=\"30\"> <br><small class=\"text-muted\">There&#39;s No Way I&#39;m Going to Lose...</small><br><small class=\"text-muted\">Dream Utopia</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/915/UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/915/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=915&amp;allstarscard_unicode=UR Yazawa Nico \u300cThere&#39;s No Way I&#39;m Going to Lose... / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/915/UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/915UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia-kcqmy9.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/915UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia-JunWUC.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=915&amp;allstarscard_unicode=UR Yazawa Nico \u300cThere&#39;s No Way I&#39;m Going to Lose... / Dream Utopia\u300d&amp;allstarscard_item_url=/allstars/card/915/UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/915UR-Yazawa-Nico-There-s-No-Way-I-m-Going-to-Lose-Dream-Utopia-kcqmy9.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"914\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/914/SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART/\" data-ajax-url=\"/ajax/allstars/card/914/\" data-ajax-title=\"SR Hoshizora Rin \u300cCan You Keep Up with Rin? / \ud83c\udfb5 HEART to HEART!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/914SR-Hoshizora-Rin-\u51db\u306e\u52d5\u304d\u306b\u3064\u3044\u3066\u3053\u3089\u308c\u308b\u304b\u306b\u3083-HEART-to-HEART-tebc6X.png\"  alt=\"SR Hoshizora Rin \u300cCan You Keep Up with Rin? / \ud83c\udfb5 HEART to HEART!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/914SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART-O6GFip.png\"  alt=\"SR Hoshizora Rin \u300cCan You Keep Up with Rin? / \ud83c\udfb5 HEART to HEART!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Hoshizora Rin  <img src=\"//i.idol.st/static/img/i_allstars_attribute/5.png?0.8-subunits\" alt=\"Active\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/0.png?0.8-subunits\" alt=\"Guard\" height=\"30\"> <br><small class=\"text-muted\">Can You Keep Up with Rin?</small><br><small class=\"text-muted\">\ud83c\udfb5 HEART to HEART!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/914/SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/914/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=914&amp;allstarscard_unicode=SR Hoshizora Rin \u300cCan You Keep Up with Rin? / \ud83c\udfb5 HEART to HEART!\u300d&amp;allstarscard_item_url=/allstars/card/914/SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/914SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART-i1ow2u.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/914SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART-SaEsWR.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=914&amp;allstarscard_unicode=SR Hoshizora Rin \u300cCan You Keep Up with Rin? / \ud83c\udfb5 HEART to HEART!\u300d&amp;allstarscard_item_url=/allstars/card/914/SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/914SR-Hoshizora-Rin-Can-You-Keep-Up-with-Rin-HEART-to-HEART-i1ow2u.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"913\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/913/UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid/\" data-ajax-url=\"/ajax/allstars/card/913/\" data-ajax-title=\"UR Tennoji Rina \u300cI Like Photography More Than Before / Classical Gothic Maid\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/913UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid-nhpDB9.png\"  alt=\"UR Tennoji Rina \u300cI Like Photography More Than Before / Classical Gothic Maid\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/913UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid-qWtExw.png\"  alt=\"UR Tennoji Rina \u300cI Like Photography More Than Before / Classical Gothic Maid\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Tennoji Rina  <img src=\"//i.idol.st/static/img/i_allstars_attribute/1.png?0.8-subunits\" alt=\"Pure\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/2.png?0.8-subunits\" alt=\"SP\" height=\"30\"> <br><small class=\"text-muted\">I Like Photography More Than Before</small><br><small class=\"text-muted\">Classical Gothic Maid</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/913/UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/913/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=913&amp;allstarscard_unicode=UR Tennoji Rina \u300cI Like Photography More Than Before / Classical Gothic Maid\u300d&amp;allstarscard_item_url=/allstars/card/913/UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/913UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid-Ns00W2.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/913UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid-exyWzU.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=913&amp;allstarscard_unicode=UR Tennoji Rina \u300cI Like Photography More Than Before / Classical Gothic Maid\u300d&amp;allstarscard_item_url=/allstars/card/913/UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/913UR-Tennoji-Rina-I-Like-Photography-More-Than-Before-Classical-Gothic-Maid-Ns00W2.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"912\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/912/SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE/\" data-ajax-url=\"/ajax/allstars/card/912/\" data-ajax-title=\"SR Emma Verde \u300cNow, eat up! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/912SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE-M0vwDI.png\"  alt=\"SR Emma Verde \u300cNow, eat up! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/912SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE-PJZNSV.png\"  alt=\"SR Emma Verde \u300cNow, eat up! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Emma Verde  <img src=\"//i.idol.st/static/img/i_allstars_attribute/0.png?0.8-subunits\" alt=\"Smile\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/0.png?0.8-subunits\" alt=\"Guard\" height=\"30\"> <br><small class=\"text-muted\">Now, eat up!</small><br><small class=\"text-muted\">\ud83c\udfb5 Miracle STAY TUNE!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/912/SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/912/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=912&amp;allstarscard_unicode=SR Emma Verde \u300cNow, eat up! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/912/SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/912SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE-td30tq.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/912SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE-lq9N8D.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=912&amp;allstarscard_unicode=SR Emma Verde \u300cNow, eat up! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/912/SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/912SR-Emma-Verde-Now-eat-up-Miracle-STAY-TUNE-td30tq.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"911\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/911/SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE/\" data-ajax-url=\"/ajax/allstars/card/911/\" data-ajax-title=\"SR Asaka Karin \u300cOh, Ai. You Came. / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/911SR-Asaka-Karin-\u3042\u3042-\u611b-\u6765\u305f\u306e\u306d-Miracle-STAY-TUNE-lY7RhM.png\"  alt=\"SR Asaka Karin \u300cOh, Ai. You Came. / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/911SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE-IK6OYi.png\"  alt=\"SR Asaka Karin \u300cOh, Ai. You Came. / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Asaka Karin  <img src=\"//i.idol.st/static/img/i_allstars_attribute/2.png?0.8-subunits\" alt=\"Cool\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/1.png?0.8-subunits\" alt=\"Voltage\" height=\"30\"> <br><small class=\"text-muted\">Oh, Ai. You Came.</small><br><small class=\"text-muted\">\ud83c\udfb5 Miracle STAY TUNE!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/911/SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/911/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=911&amp;allstarscard_unicode=SR Asaka Karin \u300cOh, Ai. You Came. / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/911/SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/911SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE-YYLoVg.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/911SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE-kA50i4.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=911&amp;allstarscard_unicode=SR Asaka Karin \u300cOh, Ai. You Came. / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/911/SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/911SR-Asaka-Karin-Oh-Ai-You-Came-Miracle-STAY-TUNE-YYLoVg.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"910\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/910/UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician/\" data-ajax-url=\"/ajax/allstars/card/910/\" data-ajax-title=\"UR Kosaka Honoka \u300cThanks for waiting! / Colorful\u2605Magician\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/910UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician-eI5YJk.png\"  alt=\"UR Kosaka Honoka \u300cThanks for waiting! / Colorful\u2605Magician\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/910UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician-yMFWuc.png\"  alt=\"UR Kosaka Honoka \u300cThanks for waiting! / Colorful\u2605Magician\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Kosaka Honoka  <img src=\"//i.idol.st/static/img/i_allstars_attribute/2.png?0.8-subunits\" alt=\"Cool\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/1.png?0.8-subunits\" alt=\"Voltage\" height=\"30\"> <br><small class=\"text-muted\">Thanks for waiting!</small><br><small class=\"text-muted\">Colorful\u2605Magician</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/910/UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/910/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=910&amp;allstarscard_unicode=UR Kosaka Honoka \u300cThanks for waiting! / Colorful\u2605Magician\u300d&amp;allstarscard_item_url=/allstars/card/910/UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/910UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician-q9r9UC.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/910UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician-WMSIjU.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=910&amp;allstarscard_unicode=UR Kosaka Honoka \u300cThanks for waiting! / Colorful\u2605Magician\u300d&amp;allstarscard_item_url=/allstars/card/910/UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/910UR-Kosaka-Honoka-Thanks-for-waiting-Colorful-Magician-q9r9UC.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"909\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/909/UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure/\" data-ajax-url=\"/ajax/allstars/card/909/\" data-ajax-title=\"UR Yuki Setsuna \u300c*Giggle* Thank You! / Dream Treasure\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/909UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure-Z03wia.png\"  alt=\"UR Yuki Setsuna \u300c*Giggle* Thank You! / Dream Treasure\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/909UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure-7E1z5n.png\"  alt=\"UR Yuki Setsuna \u300c*Giggle* Thank You! / Dream Treasure\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/2.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Yuki Setsuna  <img src=\"//i.idol.st/static/img/i_allstars_attribute/3.png?0.8-subunits\" alt=\"Elegant\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/0.png?0.8-subunits\" alt=\"Guard\" height=\"30\"> <br><small class=\"text-muted\">*Giggle* Thank You!</small><br><small class=\"text-muted\">Dream Treasure</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/909/UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/909/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=909&amp;allstarscard_unicode=UR Yuki Setsuna \u300c*Giggle* Thank You! / Dream Treasure\u300d&amp;allstarscard_item_url=/allstars/card/909/UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/909UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure-ELfUi7.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/909UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure-IUXjaC.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=909&amp;allstarscard_unicode=UR Yuki Setsuna \u300c*Giggle* Thank You! / Dream Treasure\u300d&amp;allstarscard_item_url=/allstars/card/909/UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/909UR-Yuki-Setsuna-Giggle-Thank-You-Dream-Treasure-ELfUi7.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/card\" data-item-id=\"908\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/card/908/SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE/\" data-ajax-url=\"/ajax/allstars/card/908/\" data-ajax-title=\"SR Miyashita Ai \u300cJocular Binoculars / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/card/art/908SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE-JYGmTb.png\"  alt=\"SR Miyashita Ai \u300cJocular Binoculars / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\"><img src=\"//i.idol.st/u/card/art/908SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE-Un1p7I.png\"  alt=\"SR Miyashita Ai \u300cJocular Binoculars / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\">\n    \n    \n    <h3 class=\"allstars/card-name\">\n      <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Miyashita Ai  <img src=\"//i.idol.st/static/img/i_allstars_attribute/4.png?0.8-subunits\" alt=\"Natural\" height=\"30\">   <img src=\"//i.idol.st/static/img/i_role/2.png?0.8-subunits\" alt=\"SP\" height=\"30\"> <br><small class=\"text-muted\">Jocular Binoculars</small><br><small class=\"text-muted\">\ud83c\udfb5 Miracle STAY TUNE!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n      \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/allstars/card/908/SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE/\" data-btn-name=\"open\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Open card\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     \n     data-ajax-url=\"/ajax/allstars/card/908/\"\n     data-ajax-title=\"Open card\"\n     data-ajax-handle-form=\"true\"\n     >\n    <i class=\"flaticon-deck\"></i>\n    \n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=908&amp;allstarscard_unicode=SR Miyashita Ai \u300cJocular Binoculars / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/908/SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/908SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE-fSDn2e.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/908SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE-6zqjHF.png&amp;next_title=Edit card\" data-btn-name=\"allstarscollectiblecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your collected cards\"\n     data-alt-message=\"Edit your collected cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=908&amp;allstarscard_unicode=SR Miyashita Ai \u300cJocular Binoculars / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/908/SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/908SR-Miyashita-Ai-Jocular-Binoculars-Miracle-STAY-TUNE-fSDn2e.png&amp;next_title=Edit card\" data-btn-name=\"allstarsfavoritecard\"\n     class=\"btn btn-link-secondary btn-lg \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     data-toggle=\"tooltip\"\n     data-placement=\"top\"\n     data-container=\"body\"\n     \n     >\n    <i class=\"flaticon-heart\"></i>\n    \n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n</div>\n<div id=\"allstars/card-end-of-page-2\"></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div id=\"load_more\" class=\"padding20 text-center pagination-pages\" data-next-page=\"3\">\n  \n  <nav>\n    <ul class=\"pagination pagination-sm\">\n      <li class=\"\"><a href=\"/allstars/cards/?page=1\">&laquo;</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/cards/?page=1\">1</a></li>\n      \n      <li class=\"active\"><a href=\"/allstars/cards/?page=2\">2</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/cards/?page=3\">3</a></li>\n      \n      <li class=\"disabled\"><a href=\"#\">...</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/cards/?page=76\">76</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/cards/?page=3\">&raquo;</a></li>\n    </ul>\n  </nav>\n  \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n  var merged_fields = {\"idol_i_unit_i_subunit\": [\"idol\", \"i_unit\", \"i_subunit\"]};\n  \n</script>\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/card/919", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 301, "message": "Moved Permanently"}, "headers": {"Date": ["Wed, 29 Nov 2023 07:29:17 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language"], "X-Frame-Options": ["SAMEORIGIN"], "Location": ["https://idol.st/ajax/allstars/card/919/"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=pb2slSwJBvHqQXrwqqyr6ARl1MAe%2FFQJWFQ446%2BRludeoLwDPs8YPOeappEUVeOYRV6IHRZ8%2FqHpaGZ8rcB%2Br%2FIgOzJDTuNNoCJG40Iqs0u2gKN7Wi0KMfKj\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d923820f0731d8-MIA"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/card/919/", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 07:29:17 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=vgOkvzIxNReBliMHvqz5Rmiqy69EVITJ2r3moSPJWDGDYwDzotsIKf3OVi406ahB94UZdOiOIqrCTXE10qzw%2BKTxBC8T4Vi3R6F59LV6WiwegKdug0535wX%2F\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d92383680831d8-MIA"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d | Cards list | All Stars | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-allstars/card_item_ajax item-page-title item-page-title-allstars/card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#ALLSTARS\">\n      All Stars\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/allstars/cards/\">\n      Cards list\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\n    \n    \n</h1>\n</div>\n\n\n\n\n\n<div class=\"item-info allstars/card-info\">\n  <div class=\"text-center top-item\" style=\"padding: 0px;\">\n    \n    <a href=\"//i.idol.st/u/card/art/2x/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-IwlMmY.png\" target=\"_blank\"><img src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-JDq9zz.png\" data-original-src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-VnIusu.png\"  alt=\"SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image normal\" style=\"width: 50%;\"></a><a href=\"//i.idol.st/u/card/art/2x/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-iOb7mh.png\" target=\"_blank\"><img src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-2G5Utv.png\" data-original-src=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-RUfpOx.png\"  alt=\"SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d\" class=\"allstars-card-image idolized\" style=\"width: 50%;\"></a>\n    \n  </div>\n  <br>\n  \n<div class=\"flex-table with-top-border about-flex-table\" role=\"table\">\n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"name\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-id\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Title</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>I&#39;ll Eat Them One by One!</span>  <div class=\"text-muted\" lang=\"ja\"> <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"\u30bf\u30a4\u30c8\u30eb\" height=\"20\"> <span>\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d\uff01</span> </div> <div class=\"text-muted\" lang=\"kr\"> <img src=\"//i.idol.st/static/img/language/kr.png?0.8-subunits\" alt=\"\uc81c\ubaa9\" height=\"20\"> <span>\ucc28\ub840\ub300\ub85c \uba39\uc5b4 \ubcfc\uac8c!</span> </div> <div class=\"text-muted\" lang=\"zh-hant\"> <img src=\"//i.idol.st/static/img/language/zh-hant.png?0.8-subunits\" alt=\"\u6a19\u984c\" height=\"20\"> <span>\u5d50\u73e0\u6703\u8f2a\u6d41\u5403\u5594\uff01</span> </div>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"song\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-song\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Title (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">Miracle STAY TUNE!<br>\n            <a href=\"/song/346/Miracle-STAY-TUNE/\" target=\"_blank\" data-ajax-url=\"/ajax/song/346/\" data-ajax-title=\"Miracle STAY TUNE!\" data-ajax-handle-form=\"true\">\n                Open song\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/song/346/Miracle-STAY-TUNE/\" target=\"_blank\" data-ajax-url=\"/ajax/song/346/\" data-ajax-title=\"Miracle STAY TUNE!\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/song/346Miracle-STAY-TUNE-vBoGXl.jpg\" alt=\"Open song\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"rarity\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_rarity/1.png?0.8-subunits\" alt=\"Rarity\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Rarity</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Super rare</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"attribute\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_allstars_attribute/1.png?0.8-subunits\" alt=\"Attribute\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Attribute</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Pure</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"role\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_role/2.png?0.8-subunits\" alt=\"Role\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Role</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>SP</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"costumes\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-dress\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Costume</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">SR Lanzhu Zhong&#39;s costume \u300c\ud83c\udfb5 Miracle STAY TUNE!\u300d<br>\n            <a href=\"/allstars/costume/1597/SR-Lanzhu-Zhong-s-costume-Miracle-STAY-TUNE/\" target=\"_blank\" data-ajax-url=\"/ajax/allstars/costume/1597/\" data-ajax-title=\"SR Lanzhu Zhong&#39;s costume \u300c\ud83c\udfb5 Miracle STAY TUNE!\u300d\" data-ajax-handle-form=\"true\">\n                Open costume\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/allstars/costume/1597/SR-Lanzhu-Zhong-s-costume-Miracle-STAY-TUNE/\" target=\"_blank\" data-ajax-url=\"/ajax/allstars/costume/1597/\" data-ajax-title=\"SR Lanzhu Zhong&#39;s costume \u300c\ud83c\udfb5 Miracle STAY TUNE!\u300d\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/costume/icon/1597SR-Lanzhu-Zhong-s-costume-Miracle-STAY-TUNE-fggw1y.png\" alt=\"Open costume\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-idol\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Idol</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">Lanzhu Zhong<br>\n            <a href=\"/idol/124/Lanzhu-Zhong/\" target=\"_blank\" data-ajax-url=\"/ajax/idol/124/\" data-ajax-title=\"Lanzhu Zhong\" data-ajax-handle-form=\"true\">\n                Open idol\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/idol/124/Lanzhu-Zhong/\" target=\"_blank\" data-ajax-url=\"/ajax/idol/124/\" data-ajax-title=\"Lanzhu Zhong\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/idol/124Lanzhu-ttDPY2.png\" alt=\"Open idol\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_unit\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_unit/Nijigasaki-High-School.png?0.8-subunits\" alt=\"Unit\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Unit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Nijigasaki High School Idol Club</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_subunit\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_subunit/R3BIRTH.png?0.8-subunits\" alt=\"Subunit\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Subunit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>R3BIRTH</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_year\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-education\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">School year</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>2nd year</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"cameos\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-idol\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Cameos</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Cameos</strong>\n        \n\n        <div class=\"field-content text-center\">\n          \n          \n<div class=\"alert alert-info\">\n  <div class=\"row\">\n    <div class=\"col-sm-2 text-center hidden-xs\">\n      <i class=\"flaticon-about fontx2\"></i>\n    </div>\n    <div class=\"col-sm-7\">\n      <h4><b>This section is temporarily disabled due to high traffic</b></h4>\n      <p>\n            You can can <a href=\"/signup/\" target=\"_blank\">signup <i class=\"flaticon-link\"></i></a>\n            or <a href=\"/login/\" target=\"_blank\">login <i class=\"flaticon-link\"></i></a> to access it.<br><i class=\"fontx0-8\">If you like Idol Story, please consider donating. This will help us cover the costs of the servers and allow us to keep it running for free and with minimal ads.</i></p>\n    </div>\n    \n<div class=\"col-sm-3 hidden-xs\">\n  <a href=\"/donate/\" class=\"btn btn-main btn-lg btn-block\" target=\"_blank\">\n    Donate\n    <i class=\"flaticon-heart\"></i>\n  </a>\n</div>\n\n  </div>\n</div><br>\n\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"ww_release_date\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/language/world.png?0.8-subunits\" alt=\"Worldwide version - Release date\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Worldwide version - Release date</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <span class=\"timezone\" data-to-timezone=\"Local time\"  >\n        <span class=\"datetime\">May 03, 2023 06:09:34 +0000</span>\n        (<span class=\"current_timezone\">UTC</span>)\n    </span>\n     \n    <br>\n    <small class=\"text-muted\"><span class=\"timezone\" data-timeago=\"true\" style=\"display: none;\">\n        <span class=\"datetime\">May 03, 2023 06:09:34 +0000</span>\n    </span></small>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"jp_release_date\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"Japanese version - Release date\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Japanese version - Release date</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <span class=\"timezone\" data-to-timezone=\"Local time\"  >\n        <span class=\"datetime\">May 03, 2023 06:09:15 +0000</span>\n        (<span class=\"current_timezone\">UTC</span>)\n    </span>\n     \n    <br>\n    <small class=\"text-muted\"><span class=\"timezone\" data-timeago=\"true\" style=\"display: none;\">\n        <span class=\"datetime\">May 03, 2023 06:09:15 +0000</span>\n    </span></small>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"statistics\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-statistics\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Statistics</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Statistics</strong>\n        \n\n        <div class=\"field-content \">\n          \n            <span>\n            <table class=\"hidden-xs hidden-sm table table-condensed table-rounded table-curved text-centered\">\n            <tr><td></td><td></td><th width=\"20%\">Level 1<span class=\"text-main\">*</span></th> <th width=\"20%\">Level 60<span class=\"text-main\">*</span></th></tr><tr><td><img src=\"//i.idol.st/static/img/statistic/appeal.png?0.8-subunits\" alt=\"Appeal\"></td>\n                    <th class=\"text-left\">Appeal</th><td>1498</td> <td>2247</td></tr> <tr><td><img src=\"//i.idol.st/static/img/statistic/stamina.png?0.8-subunits\" alt=\"Stamina\"></td>\n                    <th class=\"text-left\">Stamina</th><td>1070</td> <td>1605</td></tr> <tr><td><img src=\"//i.idol.st/static/img/statistic/technique.png?0.8-subunits\" alt=\"Technique\"></td>\n                    <th class=\"text-left\">Technique</th><td>1712</td> <td>2568</td></tr>\n            </table>\n            <div class=\"visible-xs visible-sm\">\n            \n                <div class=\"panel panel-pure\">\n                  <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Level 1<span class=\"text-main\">*</span></h3>\n                  </div>\n                  <div class=\"panel-body\">\n                    <div class=\"row\">\n                      \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/appeal.png?0.8-subunits\" alt=\"Appeal\" title=\"Appeal\" data-toggle=\"tooltip\"> 1498\n                        </div> \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/stamina.png?0.8-subunits\" alt=\"Stamina\" title=\"Stamina\" data-toggle=\"tooltip\"> 1070\n                        </div> \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/technique.png?0.8-subunits\" alt=\"Technique\" title=\"Technique\" data-toggle=\"tooltip\"> 1712\n                        </div>\n                    </div>\n                  </div>\n                </div>\n                 \n                <div class=\"panel panel-pure\">\n                  <div class=\"panel-heading\">\n                    <h3 class=\"panel-title\">Level 60<span class=\"text-main\">*</span></h3>\n                  </div>\n                  <div class=\"panel-body\">\n                    <div class=\"row\">\n                      \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/appeal.png?0.8-subunits\" alt=\"Appeal\" title=\"Appeal\" data-toggle=\"tooltip\"> 2247\n                        </div> \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/stamina.png?0.8-subunits\" alt=\"Stamina\" title=\"Stamina\" data-toggle=\"tooltip\"> 1605\n                        </div> \n                        <div class=\"col-sm-4\">\n                          <img src=\"//i.idol.st/static/img/statistic/technique.png?0.8-subunits\" alt=\"Technique\" title=\"Technique\" data-toggle=\"tooltip\"> 2568\n                        </div>\n                    </div>\n                  </div>\n                </div>\n                \n            </div>\n            <small class=\"text-main\">*Base statistics, without any training.</small>\n            </span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"skill\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/u/card/skill/77SP-Skill-Up-\u6b21\u306b\u767a\u52d5\u3059\u308bSP\u7279\u6280\u3067\u7372\u5f97\u3059\u308b\u30dc\u30eb\u30c6\u30fc\u30b8\u304c\u81ea\u8eab\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306e-value1-\u5897\u52a0-igYOZE.png\" alt=\"Skill\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Skill</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Skill</strong>\n        \n\n        <div class=\"field-content \">\n          \n            <span>\n        <div class=\"skill-per-card text-center\">\n          <div class=\"row\">\n            \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_77_en = {\"1\": \"The next time you'll activate SP skill, increase the Voltage gained by 20% of own Technique\", \"2\": \"The next time you'll activate SP skill, increase the Voltage gained by 20.5% of own Technique\", \"3\": \"The next time you'll activate SP skill, increase the Voltage gained by 21% of own Technique\", \"4\": \"The next time you'll activate SP skill, increase the Voltage gained by 21.5% of own Technique\", \"5\": \"The next time you'll activate SP skill, increase the Voltage gained by 22% of own Technique\"};\n                  </script>\n                  <p class=\"skill \" data-skill-id=\"77\" data-language=\"en\">\n                    <img src=\"//i.idol.st/static/img/language/world.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">Someday the World Will Know</strong><br>\n                    <span class=\"sentence\">The next time you&#39;ll activate SP skill, increase the Voltage gained by 20% of own Technique</span><br>\n                   <span class=\"badge progress-bar-pure\">30%</span>\n                  </p>\n                </div>\n                 \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_77_ja = {\"1\": \"\\u6b21\\u306b\\u767a\\u52d5\\u3059\\u308bSP\\u7279\\u6280\\u3067\\u7372\\u5f97\\u3059\\u308b\\u30dc\\u30eb\\u30c6\\u30fc\\u30b8\\u304c\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e20%\\u5897\\u52a0\", \"2\": \"\\u6b21\\u306b\\u767a\\u52d5\\u3059\\u308bSP\\u7279\\u6280\\u3067\\u7372\\u5f97\\u3059\\u308b\\u30dc\\u30eb\\u30c6\\u30fc\\u30b8\\u304c\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e20.5%\\u5897\\u52a0\", \"3\": \"\\u6b21\\u306b\\u767a\\u52d5\\u3059\\u308bSP\\u7279\\u6280\\u3067\\u7372\\u5f97\\u3059\\u308b\\u30dc\\u30eb\\u30c6\\u30fc\\u30b8\\u304c\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e21%\\u5897\\u52a0\", \"4\": \"\\u6b21\\u306b\\u767a\\u52d5\\u3059\\u308bSP\\u7279\\u6280\\u3067\\u7372\\u5f97\\u3059\\u308b\\u30dc\\u30eb\\u30c6\\u30fc\\u30b8\\u304c\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e21.5%\\u5897\\u52a0\", \"5\": \"\\u6b21\\u306b\\u767a\\u52d5\\u3059\\u308bSP\\u7279\\u6280\\u3067\\u7372\\u5f97\\u3059\\u308b\\u30dc\\u30eb\\u30c6\\u30fc\\u30b8\\u304c\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e22%\\u5897\\u52a0\"};\n                  </script>\n                  <p class=\"skill text-muted\" data-skill-id=\"77\" data-language=\"ja\">\n                    <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">\u3044\u3064\u304b\u4e16\u754c\u304c</strong><br>\n                    <span class=\"sentence\">\u6b21\u306b\u767a\u52d5\u3059\u308bSP\u7279\u6280\u3067\u7372\u5f97\u3059\u308b\u30dc\u30eb\u30c6\u30fc\u30b8\u304c\u81ea\u8eab\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306e20%\u5897\u52a0</span><br>\n                   <span class=\"badge progress-bar-pure\">30%</span>\n                  </p>\n                </div>\n                \n          </div>\n            <div class=\"inline-block change-level pull-right\" style=\"display: none;\">\n              <span class=\"btn-group\">\n        <a href=\"#changeSkillLevelDecrease\" class=\"btn btn-pure btn-xs disabled\">-</a>\n                <span class=\"btn btn-pure btn-xs disabled skill-level\">\n              </span>\n                <a href=\"#changeSkillLevelIncrease\" class=\"btn btn-pure btn-xs\">+</a>\n              </span>\n            </div>\n        </div>\n        </span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"passive_ability\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/u/card/skill/2Technique-Increase-base-Technique-by-value1-njS2Et.png\" alt=\"Ability (Passive)\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Ability (Passive)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Ability (Passive)</strong>\n        \n\n        <div class=\"field-content \">\n          \n            <span>\n        <div class=\"skill-per-card text-center\">\n          <div class=\"row\">\n            \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_2_en = {\"1\": \"Increase base Technique by 2%.\", \"2\": \"Increase base Technique by 2.3%.\", \"3\": \"Increase base Technique by 2.6%.\", \"4\": \"Increase base Technique by 2.9%.\", \"5\": \"Increase base Technique by 3.2%.\"};\n                  </script>\n                  <p class=\"skill \" data-skill-id=\"2\" data-language=\"en\">\n                    <img src=\"//i.idol.st/static/img/language/world.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">Technique+</strong><br>\n                    <span class=\"sentence\">Increase base Technique by 2%.</span><br>\n                  <span class=\"badge progress-bar-pure\"> Affects: Same Attribute</span> \n                  </p>\n                </div>\n                 \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_2_ja = {\"1\": \"\\u57fa\\u672c\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u304c2%\\u5897\\u52a0\", \"2\": \"\\u57fa\\u672c\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u304c2.3%\\u5897\\u52a0\", \"3\": \"\\u57fa\\u672c\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u304c2.6%\\u5897\\u52a0\", \"4\": \"\\u57fa\\u672c\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u304c2.9%\\u5897\\u52a0\", \"5\": \"\\u57fa\\u672c\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u304c3.2%\\u5897\\u52a0\"};\n                  </script>\n                  <p class=\"skill text-muted\" data-skill-id=\"2\" data-language=\"ja\">\n                    <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">\u30c6\u30af\u30cb\u30c3\u30af\uff0b</strong><br>\n                    <span class=\"sentence\">\u57fa\u672c\u30c6\u30af\u30cb\u30c3\u30af\u304c2%\u5897\u52a0</span><br>\n                  <span class=\"badge progress-bar-pure\"> \u5bfe\u8c61: \u540c\u5c5e\u6027</span> \n                  </p>\n                </div>\n                \n          </div>\n            <div class=\"inline-block change-level pull-right\" style=\"display: none;\">\n              <span class=\"btn-group\">\n        <a href=\"#changeSkillLevelDecrease\" class=\"btn btn-pure btn-xs disabled\">-</a>\n                <span class=\"btn btn-pure btn-xs disabled skill-level\">\n              </span>\n                <a href=\"#changeSkillLevelIncrease\" class=\"btn btn-pure btn-xs\">+</a>\n              </span>\n            </div>\n        </div>\n        </span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"show_ability\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-skill\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Ability (Show)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Ability (Show)</strong>\n        \n\n        <div class=\"field-content \">\n          \n            <span>\n        <div class=\"skill-per-card text-center\">\n          <div class=\"row\">\n            \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_982_en = {\"1\": \"Gain 2% of own Technique as SP Gauge.\\r\\nCondition: On Appeal Chance success, 50% chance\"};\n                  </script>\n                  <p class=\"skill \" data-skill-id=\"982\" data-language=\"en\">\n                    <img src=\"//i.idol.st/static/img/language/world.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">SP Gauge Gained</strong><br>\n                    <span class=\"sentence\">Gain 2% of own Technique as SP Gauge.\r\nCondition: On Appeal Chance success, 50% chance</span><br>\n                   \n                  </p>\n                </div>\n                 \n                <div class=\"col-md-6\">\n                  <script>\n                    var skill_sentences_982_ja = {\"1\": \"\\u81ea\\u8eab\\u306e\\u30c6\\u30af\\u30cb\\u30c3\\u30af\\u306e2%SP\\u30b2\\u30fc\\u30b8\\u3092\\u7372\\u5f97\\r\\n\\u6761\\u4ef6:\\u30a2\\u30d4\\u30fc\\u30eb\\u30c1\\u30e3\\u30f3\\u30b9(AC)\\u6210\\u529f\\u6642 \\u78ba\\u7387:50%\"};\n                  </script>\n                  <p class=\"skill text-muted\" data-skill-id=\"982\" data-language=\"ja\">\n                    <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"version\" width=\"30\" style=\"min-width: unset;\"> <strong class=\"name\">SP\u30b2\u30fc\u30b8\u7372\u5f97</strong><br>\n                    <span class=\"sentence\">\u81ea\u8eab\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306e2%SP\u30b2\u30fc\u30b8\u3092\u7372\u5f97\r\n\u6761\u4ef6:\u30a2\u30d4\u30fc\u30eb\u30c1\u30e3\u30f3\u30b9(AC)\u6210\u529f\u6642 \u78ba\u7387:50%</span><br>\n                   \n                  </p>\n                </div>\n                \n          </div>\n            <div class=\"inline-block change-level pull-right\" style=\"display: none;\">\n              <span class=\"btn-group\">\n        <a href=\"#changeSkillLevelDecrease\" class=\"btn btn-pure btn-xs disabled\">-</a>\n                <span class=\"btn btn-pure btn-xs disabled skill-level\">\n              </span>\n                <a href=\"#changeSkillLevelIncrease\" class=\"btn btn-pure btn-xs\">+</a>\n              </span>\n            </div>\n        </div>\n        </span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"transparent\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Transparent</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/wiki/Transparents%20design%20team/\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-download\"></i>  <span>Upload transparent</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"transparent_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Transparent (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/wiki/Transparents%20design%20team/\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-download\"></i>  <span>Upload transparent (idolized)</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"art\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Art</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n            <div class=\"image-with-links\" data-thumbnail=\"//i.idol.st/u/card/art/tthumb/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-Fww6lx.png\" style=\"\" >\n                <h4>Download</h4>\n                <ul class=\"list-group inline-block\">\n                    <li class=\"list-group-item\"><a href=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-VnIusu.png\" target=\"_blank\" >Original <i class=\"flaticon-link\"></i></a></li> <li class=\"list-group-item\"><a href=\"//i.idol.st/u/card/art/2x/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-IwlMmY.png\" target=\"_blank\" >High quality <i class=\"flaticon-link\"></i></a></li>\n                </ul>\n            </div>\n            \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"art_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Art (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n            <div class=\"image-with-links\" data-thumbnail=\"//i.idol.st/u/card/art/tthumb/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-myvbxC.png\" style=\"\" >\n                <h4>Download</h4>\n                <ul class=\"list-group inline-block\">\n                    <li class=\"list-group-item\"><a href=\"//i.idol.st/u/card/art/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-RUfpOx.png\" target=\"_blank\" >Original <i class=\"flaticon-link\"></i></a></li> <li class=\"list-group-item\"><a href=\"//i.idol.st/u/card/art/2x/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-iOb7mh.png\" target=\"_blank\" >High quality <i class=\"flaticon-link\"></i></a></li>\n                </ul>\n            </div>\n            \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"icon\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Icon</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-OZtCNz.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-RJRPmv.png\" alt=\"Icon\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"icon_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Icon (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-\u9806\u756a\u306b\u98df\u3079\u308b\u308f\u306d-Miracle-STAY-TUNE-neUnHO.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-04Ipqt.png\" alt=\"Icon (Idolized)\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"description\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hashtag\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Visual description</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Visual description</strong>\n        \n\n        <div class=\"field-content text-left\">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/suggestededits/add/allstarscard/?id=919&amp;reason=description\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-edit\"></i>  <span>Add visual description</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"description_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hashtag\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Visual description - Idolized</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Visual description - Idolized</strong>\n        \n\n        <div class=\"field-content text-left\">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/suggestededits/add/allstarscard/?id=919&amp;reason=description_idolized\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-edit\"></i>  <span>Add visual description - idolized</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"allstarscollectiblecards\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-deck\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Collected cards</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">107 collected cards<br>\n            <a href=\"/accounts/?allstarscollectedcards__allstarscard=919\" target=\"_blank\" data-ajax-url=\"/ajax/accounts/?allstarscollectedcards__allstarscard=919&amp;ajax_modal_only=\" data-ajax-title=\"107 collected cards\" data-ajax-handle-form=\"true\">\n                View all\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/accounts/?allstarscollectedcards__allstarscard=919\" target=\"_blank\" data-ajax-url=\"/ajax/accounts/?allstarscollectedcards__allstarscard=919&amp;ajax_modal_only=\" data-ajax-title=\"107 collected cards\" data-ajax-handle-form=\"true\">\n          \n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"allstarsfavoritecards\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-heart\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Favorite cards</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">29 favorite cards<br>\n            <a href=\"/users/?allstarsfavoritecards__allstarscard=919\" target=\"_blank\" data-ajax-url=\"/ajax/users/?allstarsfavoritecards__allstarscard=919&amp;ajax_modal_only=\" data-ajax-title=\"29 favorite cards\" data-ajax-handle-form=\"true\">\n                View all\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/users/?allstarsfavoritecards__allstarscard=919\" target=\"_blank\" data-ajax-url=\"/ajax/users/?allstarsfavoritecards__allstarscard=919&amp;ajax_modal_only=\" data-ajax-title=\"29 favorite cards\" data-ajax-handle-form=\"true\">\n          \n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_allstarscollectiblecard\" role=\"row\"\n         \n          data-button=\"allstarscollectiblecard\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-add\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Add to your collected cards</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"/signup/?next=/allstarscollectiblecards/add/?allstarscard_id=919&amp;allstarscard_unicode=SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-RJRPmv.png&amp;allstarscard_icon_idolized_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-04Ipqt.png&amp;next_title=Edit card\" class=\" btn btn-secondary btn-lines btn-lg\"   data-btn-name=\"allstarscollectiblecard\" title=\"Add to your collected cards\">\n        <i class=\"flaticon-add\"></i>  <span>Add to your collected cards</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_allstarsfavoritecard\" role=\"row\"\n         \n          data-button=\"allstarsfavoritecard\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-heart\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Add to your favorite cards</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"/signup/?next=/allstarsfavoritecards/add/?allstarscard_id=919&amp;allstarscard_unicode=SR Lanzhu Zhong \u300cI&#39;ll Eat Them One by One! / \ud83c\udfb5 Miracle STAY TUNE!\u300d&amp;allstarscard_item_url=/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&amp;allstarscard_image_url=//i.idol.st/u/card/icon/919SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE-RJRPmv.png&amp;next_title=Edit card\" class=\" btn btn-secondary btn-lines btn-lg\"   data-btn-name=\"allstarsfavoritecard\" title=\"Add to your favorite cards\">\n        <i class=\"flaticon-heart\"></i>  <span>Add to your favorite cards</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_suggest_edit\" role=\"row\"\n         \n          data-button=\"suggest_edit\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-edit\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Suggest edit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"/suggestededits/add/allstarscard/?id=919\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"suggest_edit\" title=\"Suggest edit\">\n        <i class=\"flaticon-edit\"></i>  <span>Suggest edit</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_comments\" role=\"row\"\n         \n          data-button=\"comments\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-comments\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Comments</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"https://idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/#disqus_thread\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"comments\" title=\"Comments\">\n        <i class=\"flaticon-comments\"></i>  <span>Comments</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_share\" role=\"row\"\n         \n          data-button=\"share\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-link\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Share</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n\n<div class=\"btn-group\">\n<a href=\"https://idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-copy-to-clipboard=\"https://idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/\" data-toggle=\"tooltip\" title=\"Copy\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/share-copy.png?0.8-subunits\" alt=\"Copy\" />\n</a>\n<a href=\"http://twitter.com/share?text=SR%20Lanzhu%20Zhong%20%E3%80%8CI%27ll%20Eat%20Them%20One%20by%20One%21%20/%20%F0%9F%8E%B5%20Miracle%20STAY%20TUNE%21%E3%80%8D&url=https%3A//idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&hashtags=LoveLive,\u30e9\u30d6\u30e9\u30a4\u30d6,\u30b9\u30af\u30b9\u30bf,SIFAS,LLAS,&via=idoldotst\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Twitter\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/twitter.png?0.8-subunits\" alt=\"Twitter\" />\n</a>\n<a href=\"http://www.facebook.com/sharer/sharer.php?u=https%3A//idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Facebook\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/facebook.png?0.8-subunits\" alt=\"Facebook\" />\n</a>\n<a href=\"http://www.reddit.com/submit?url=https%3A//idol.st/allstars/card/919/SR-Lanzhu-Zhong-I-ll-Eat-Them-One-by-One-Miracle-STAY-TUNE/&title=SR%20Lanzhu%20Zhong%20%E3%80%8CI%27ll%20Eat%20Them%20One%20by%20One%21%20/%20%F0%9F%8E%B5%20Miracle%20STAY%20TUNE%21%E3%80%8D\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Reddit\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/reddit.png?0.8-subunits\" alt=\"Reddit\" />\n</a>\n</div>\n\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n</div>\n\n\n</div>\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n</script>\n\n<script>\n  \n  loadALLSTARSCard();\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}]}