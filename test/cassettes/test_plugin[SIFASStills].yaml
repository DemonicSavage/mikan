{"version": 1, "interactions": [{"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/stills/?page=2", "body": null, "headers": {}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:47 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=BkXAfgB2xBRZcTPThdjpnfDXFniTlaV6F3livXe8ogW0H806fHFPqjOvsgftmM48MlkULcA%2F%2Bwp2hEHWJLsN5azjFaSlLprT6o0C7zXfoIVFx0nX2PsE1EB7\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d87184dc0b4d0f-GRU"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">Stills list | All Stars | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">All the stills! Search by name and filter by idol / unit / subunit to find all the details you need about the stills from Love Live!. -- Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-allstars/still_list_ajax list-page-title list-page-title-allstars/still\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#ALLSTARS\">\n      All Stars\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-pictures\"></i>\n    \n    Stills list\n    \n    \n</h1>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"row items list-items-allstars/still\" id=\"allstars/still-page-2\" data-page-number=\"2\">\n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"331\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/331/Still-Nakasu-Kasumi/\" data-ajax-url=\"/ajax/allstars/still/331/\" data-ajax-title=\"Still - Nakasu Kasumi\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/331Still-Nakasu-Kasumi-H6ahOY.jpeg\" alt=\"Still - Nakasu Kasumi\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"330\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/330/Still-Uehara-Ayumu/\" data-ajax-url=\"/ajax/allstars/still/330/\" data-ajax-title=\"Still - Uehara Ayumu\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/330Still-Uehara-Ayumu-VOneXX.jpeg\" alt=\"Still - Uehara Ayumu\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"329\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/329/Still-Kurosawa-Ruby/\" data-ajax-url=\"/ajax/allstars/still/329/\" data-ajax-title=\"Still - Kurosawa Ruby\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/329Still-Kurosawa-Ruby-k4fH8X.jpeg\" alt=\"Still - Kurosawa Ruby\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"328\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/328/Still-Ohara-Mari/\" data-ajax-url=\"/ajax/allstars/still/328/\" data-ajax-title=\"Still - Ohara Mari\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/328Still-Ohara-Mari-9AvM7P.jpeg\" alt=\"Still - Ohara Mari\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"327\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/327/Still-Kunikida-Hanamaru/\" data-ajax-url=\"/ajax/allstars/still/327/\" data-ajax-title=\"Still - Kunikida Hanamaru\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/327Still-Kunikida-Hanamaru-1mXoFt.jpeg\" alt=\"Still - Kunikida Hanamaru\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"326\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/326/Still-Tsushima-Yoshiko/\" data-ajax-url=\"/ajax/allstars/still/326/\" data-ajax-title=\"Still - Tsushima Yoshiko\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/326Still-Tsushima-Yoshiko-ieYNgQ.jpeg\" alt=\"Still - Tsushima Yoshiko\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"325\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/325/Still-Watanabe-You/\" data-ajax-url=\"/ajax/allstars/still/325/\" data-ajax-title=\"Still - Watanabe You\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/325Still-Watanabe-You-1btGuw.jpeg\" alt=\"Still - Watanabe You\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"324\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/324/Still-Kurosawa-Dia/\" data-ajax-url=\"/ajax/allstars/still/324/\" data-ajax-title=\"Still - Kurosawa Dia\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/324Still-Kurosawa-Dia-BdSSTD.jpeg\" alt=\"Still - Kurosawa Dia\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"323\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/323/Still-Matsuura-Kanan/\" data-ajax-url=\"/ajax/allstars/still/323/\" data-ajax-title=\"Still - Matsuura Kanan\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/323Still-Matsuura-Kanan-XLyh94.jpeg\" alt=\"Still - Matsuura Kanan\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"322\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/322/Still-Sakurauchi-Riko/\" data-ajax-url=\"/ajax/allstars/still/322/\" data-ajax-title=\"Still - Sakurauchi Riko\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/322Still-Sakurauchi-Riko-P63cn9.jpeg\" alt=\"Still - Sakurauchi Riko\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"321\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/321/Still-Takami-Chika/\" data-ajax-url=\"/ajax/allstars/still/321/\" data-ajax-title=\"Still - Takami Chika\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/321Still-Takami-Chika-2z2M1q.jpeg\" alt=\"Still - Takami Chika\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"allstars/still\" data-item-id=\"320\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 7px 0px;\">\n  \n  <a href=\"/allstars/still/320/Still-Yazawa-Nico/\" data-ajax-url=\"/ajax/allstars/still/320/\" data-ajax-title=\"Still - Yazawa Nico\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/still/320Still-Yazawa-Nico-CnBpBf.jpeg\" alt=\"Still - Yazawa Nico\" class=\"allstars/still-image img-responsive\" style=\" max-height: 300px;\">\n    \n    \n    <br>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n</div>\n<div id=\"allstars/still-end-of-page-2\"></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div id=\"load_more\" class=\"padding20 text-center pagination-pages\" data-next-page=\"3\">\n  \n  <nav>\n    <ul class=\"pagination pagination-sm\">\n      <li class=\"\"><a href=\"/allstars/stills/?page=1\">&laquo;</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/stills/?page=1\">1</a></li>\n      \n      <li class=\"active\"><a href=\"/allstars/stills/?page=2\">2</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/stills/?page=3\">3</a></li>\n      \n      <li class=\"disabled\"><a href=\"#\">...</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/stills/?page=29\">29</a></li>\n      \n      <li class=\"\"><a href=\"/allstars/stills/?page=3\">&raquo;</a></li>\n    </ul>\n  </nav>\n  \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n  var merged_fields = {\"idols_i_unit_i_subunit\": [\"idols\", \"i_unit\", \"i_subunit\"]};\n  \n</script>\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/still/331", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 301, "message": "Moved Permanently"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:47 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language"], "X-Frame-Options": ["SAMEORIGIN"], "Location": ["https://idol.st/ajax/allstars/still/331/"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=IFijrCv%2Fm5QTRiUY%2FQI1PQZfWzJ9uOB%2BYBxQpA9rGvUQXzavhVrvAYNtNq7SREngSSwNBTDh3QwudJ2G%2BcK1r77LH4rwATVyHX5efByXj9ocqBIRAEGkoVZo\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d8718a885851bf-GRU"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/allstars/still/331/", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:48 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=EPO4fRB%2BW5BB%2BWYj9k4Cv4AYSz91w2UmVGNNERLa%2Bi5x7BGojS13Btwd%2B8MAimfEGOZEspmxTGPbpS5wrXeREVuum9eV5pC1ShKSZJYi4ebImIlB6Ms2Cv4V\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d8718cc8cf51bf-GRU"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">Still - Nakasu Kasumi | Stills list | All Stars | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-allstars/still_item_ajax item-page-title item-page-title-allstars/still\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#ALLSTARS\">\n      All Stars\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/allstars/stills/\">\n      Stills list\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-pictures\"></i>\n    \n    Still - Nakasu Kasumi\n    \n    \n</h1>\n</div>\n\n\n\n\n\n<div class=\"item-info allstars/still-info\">\n  <div class=\"text-center top-item\" style=\"padding: 0px;\">\n    \n    <a href=\"//i.idol.st/u/still/2x/331Still-Nakasu-Kasumi-OY6wFC.png\" target=\"_blank\">\n      <img src=\"//i.idol.st/u/still/331Still-Nakasu-Kasumi-H6ahOY.jpeg\" alt=\"Still - Nakasu Kasumi\" class=\"allstars/still-image\" style=\" max-height: 400px;\">\n    </a>\n    \n  </div>\n  <br>\n  \n<div class=\"flex-table with-top-border about-flex-table\" role=\"table\">\n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"image\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-download\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Image</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n            <div class=\"image-with-links\" data-thumbnail=\"//i.idol.st/u/still/tthumb/331Still-Nakasu-Kasumi-OxKhYb.jpeg\" style=\"\" >\n                <h4>Download</h4>\n                <ul class=\"list-group inline-block\">\n                    <li class=\"list-group-item\"><a href=\"//i.idol.st/u/still/aJVpfiStill-f9A1fs.jpeg\" target=\"_blank\" >Original <i class=\"flaticon-link\"></i></a></li> <li class=\"list-group-item\"><a href=\"//i.idol.st/u/still/2x/331Still-Nakasu-Kasumi-OY6wFC.png\" target=\"_blank\" >High quality <i class=\"flaticon-link\"></i></a></li>\n                </ul>\n            </div>\n            \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"transparent\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Transparent</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/still/transparent/331Still-Nakasu-Kasumi-qLFqnD.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/still/transparent/tthumb/331Still-Nakasu-Kasumi-Yc9vDE.png\" alt=\"Transparent\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idols\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-idol\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Idols</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Idols</strong>\n        \n\n        <div class=\"field-content \">\n          \n          <div class=\"row row-align-right\"><div class=\"col-sm-3 col-sm-offset-9\"  >\n    <a href=\"/idol/67/Nakasu-Kasumi/\" class=\" \" target=\"_blank\" data-ajax-url=\"/ajax/idol/67/\" data-ajax-title=\"Nakasu Kasumi\" data-ajax-handle-form=\"true\" >\n        <img class=\"image\" src=\"//i.idol.st/u/idol/67Nakasu-Kasumi-M5ZCuB.png\" alt=\"Nakasu Kasumi\" \n    data-toggle=\"tooltip\" title=\"Nakasu Kasumi\"\n    data-trigger=\"hover\" data-html=\"false\"\n    data-placement=\"top\" data-container=\"body\"\n    >  \n    </a>\n    </div></div>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_suggest_edit\" role=\"row\"\n         \n          data-button=\"suggest_edit\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-edit\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Suggest edit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"/suggestededits/add/allstarsstill/?id=331\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"suggest_edit\" title=\"Suggest edit\">\n        <i class=\"flaticon-edit\"></i>  <span>Suggest edit</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_comments\" role=\"row\"\n         \n          data-button=\"comments\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-comments\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Comments</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"https://idol.st/allstars/still/331/Still-Nakasu-Kasumi/#disqus_thread\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"comments\" title=\"Comments\">\n        <i class=\"flaticon-comments\"></i>  <span>Comments</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_share\" role=\"row\"\n         \n          data-button=\"share\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-link\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Share</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n\n<div class=\"btn-group\">\n<a href=\"https://idol.st/allstars/still/331/Still-Nakasu-Kasumi/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-copy-to-clipboard=\"https://idol.st/allstars/still/331/Still-Nakasu-Kasumi/\" data-toggle=\"tooltip\" title=\"Copy\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/share-copy.png?0.8-subunits\" alt=\"Copy\" />\n</a>\n<a href=\"http://twitter.com/share?text=Still%20-%20Nakasu%20Kasumi&url=https%3A//idol.st/allstars/still/331/Still-Nakasu-Kasumi/&hashtags=LoveLive,\u30e9\u30d6\u30e9\u30a4\u30d6,\u30b9\u30af\u30b9\u30bf,SIFAS,LLAS,&via=idoldotst\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Twitter\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/twitter.png?0.8-subunits\" alt=\"Twitter\" />\n</a>\n<a href=\"http://www.facebook.com/sharer/sharer.php?u=https%3A//idol.st/allstars/still/331/Still-Nakasu-Kasumi/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Facebook\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/facebook.png?0.8-subunits\" alt=\"Facebook\" />\n</a>\n<a href=\"http://www.reddit.com/submit?url=https%3A//idol.st/allstars/still/331/Still-Nakasu-Kasumi/&title=Still%20-%20Nakasu%20Kasumi\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Reddit\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/reddit.png?0.8-subunits\" alt=\"Reddit\" />\n</a>\n</div>\n\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n</div>\n\n\n</div>\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}]}