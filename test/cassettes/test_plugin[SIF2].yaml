{"version": 1, "interactions": [{"request": {"method": "GET", "uri": "https://idol.st/ajax/SIF2/cards/?page=2", "body": null, "headers": {}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:45 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=qURk%2FzfgLOGwelNg8bsoTe7EMr1rZCeAU1Q9R3UVmBfhYcvUWiSrgbfk%2FJnNyzwFbJUk6fCztWOFrR67Tvu%2BVaGpKQVMUnLcaPVIVJ2Q8OroGsfcFu7GUldC\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d8717c683c0314-MIA"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">Cards list | SIF2 MIRACLE LIVE | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">All the cards! Search by title, visual description, ... and filter by idol / unit / subunit, rarity, attribute, server availability, origin to find all the details you need about the cards from Love Live!. -- Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-SIF2/card_list_ajax list-page-title list-page-title-SIF2/card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#SIF2\">\n      SIF2 MIRACLE LIVE\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    Cards list\n    \n    \n</h1>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"row items list-items-SIF2/card\" id=\"SIF2/card-page-2\" data-page-number=\"2\">\n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"477\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/477/SR-Kosaka-Honoka-Smile-Spring-s-in-Full-Bloom/\" data-ajax-url=\"/ajax/SIF2/card/477/\" data-ajax-title=\"SR Kosaka Honoka Smile \u300cSpring&#39;s in Full-Bloom!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/477SR-Kosaka-Honoka-Smile-\u6625\u3089\u3093\u307e\u3093\u3063-HqWnaY.png\"  alt=\"SR Kosaka Honoka Smile \u300cSpring&#39;s in Full-Bloom!\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/477SR-Kosaka-Honoka-Smile-\u6625\u3089\u3093\u307e\u3093\u3063-S66oAd.png\"  alt=\"SR Kosaka Honoka Smile \u300cSpring&#39;s in Full-Bloom!\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Kosaka Honoka  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">Spring&#39;s in Full-Bloom!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"476\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/476/UR-Hoshizora-Rin-Pure-Adorable-Gifts/\" data-ajax-url=\"/ajax/SIF2/card/476/\" data-ajax-title=\"UR Hoshizora Rin Pure \u300cAdorable Gifts\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/476UR-Hoshizora-Rin-Pure-\u53ef\u611b\u3044\u8d08\u308a\u7269\u305f\u3061-iKHMKH.png\"  alt=\"UR Hoshizora Rin Pure \u300cAdorable Gifts\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/476UR-Hoshizora-Rin-Pure-\u53ef\u611b\u3044\u8d08\u308a\u7269\u305f\u3061-BXE5gI.png\"  alt=\"UR Hoshizora Rin Pure \u300cAdorable Gifts\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Hoshizora Rin  <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Pure\" height=\"30\"> <br><small class=\"text-muted\">Adorable Gifts</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"480\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/\" data-ajax-url=\"/ajax/SIF2/card/480/\" data-ajax-title=\"SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-Gg7SJy.png\"  alt=\"SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-m4tvRl.png\"  alt=\"SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Shibuya Kanon  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">Glittering Winter Sky</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"472\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/472/UR-Miyashita-Ai-Pure-Fun-With-Just-the-Two-of-Us/\" data-ajax-url=\"/ajax/SIF2/card/472/\" data-ajax-title=\"UR Miyashita Ai Pure \u300cFun With Just the Two of Us\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/472UR-Miyashita-Ai-Pure-\u3075\u305f\u308a\u3067\u697d\u3057\u304f-RKkX8T.png\"  alt=\"UR Miyashita Ai Pure \u300cFun With Just the Two of Us\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/472UR-Miyashita-Ai-Pure-\u3075\u305f\u308a\u3067\u697d\u3057\u304f-9ifFYP.png\"  alt=\"UR Miyashita Ai Pure \u300cFun With Just the Two of Us\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Miyashita Ai  <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Pure\" height=\"30\"> <br><small class=\"text-muted\">Fun With Just the Two of Us</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"473\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/473/UR-Arashi-Chisato-Smile-Event-After-Party/\" data-ajax-url=\"/ajax/SIF2/card/473/\" data-ajax-title=\"UR Arashi Chisato Smile \u300cEvent After-Party\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/473UR-Arashi-Chisato-Smile-\u304a\u3064\u304b\u308c\u3055\u307e\u4f1a-56A0g1.png\"  alt=\"UR Arashi Chisato Smile \u300cEvent After-Party\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/473UR-Arashi-Chisato-Smile-\u304a\u3064\u304b\u308c\u3055\u307e\u4f1a-QtA5pm.png\"  alt=\"UR Arashi Chisato Smile \u300cEvent After-Party\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Arashi Chisato  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">Event After-Party</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"474\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/474/UR-Sakurakoji-Kinako-Smile-Backstage-Tension/\" data-ajax-url=\"/ajax/SIF2/card/474/\" data-ajax-title=\"UR Sakurakoji Kinako Smile \u300cBackstage Tension\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/474UR-Sakurakoji-Kinako-Smile-\u7dca\u5f35\u306e\u821e\u53f0\u8896-ZwtIPK.png\"  alt=\"UR Sakurakoji Kinako Smile \u300cBackstage Tension\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/474UR-Sakurakoji-Kinako-Smile-\u7dca\u5f35\u306e\u821e\u53f0\u8896-Jh3F3B.png\"  alt=\"UR Sakurakoji Kinako Smile \u300cBackstage Tension\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Sakurakoji Kinako  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">Backstage Tension</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"475\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/475/UR-Onitsuka-Natsumi-Smile-Researching-Ability/\" data-ajax-url=\"/ajax/SIF2/card/475/\" data-ajax-title=\"UR Onitsuka Natsumi Smile \u300cResearching Ability\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/475UR-Onitsuka-Natsumi-Smile-\u6301\u3061\u524d\u306e\u60c5\u5831\u53ce\u96c6\u80fd\u529b-jnkcDj.png\"  alt=\"UR Onitsuka Natsumi Smile \u300cResearching Ability\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/475UR-Onitsuka-Natsumi-Smile-\u6301\u3061\u524d\u306e\u60c5\u5831\u53ce\u96c6\u80fd\u529b-3lG0wv.png\"  alt=\"UR Onitsuka Natsumi Smile \u300cResearching Ability\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Onitsuka Natsumi  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">Researching Ability</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"470\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/470/SR-Yuki-Setsuna-Pure-Let-s-Go/\" data-ajax-url=\"/ajax/SIF2/card/470/\" data-ajax-title=\"SR Yuki Setsuna Pure \u300cLet\u2019s Go!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/470SR-Yuki-Setsuna-Pure-\u884c\u304d\u307e\u3059\u3088\u30fc-CvvK5o.png\"  alt=\"SR Yuki Setsuna Pure \u300cLet\u2019s Go!\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/470SR-Yuki-Setsuna-Pure-\u884c\u304d\u307e\u3059\u3088\u30fc-bOKxaJ.png\"  alt=\"SR Yuki Setsuna Pure \u300cLet\u2019s Go!\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Yuki Setsuna  <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Pure\" height=\"30\"> <br><small class=\"text-muted\">Let\u2019s Go!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"469\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/469/SR-Watanabe-You-Pure-Let-s-Have-Lots-of-Fun/\" data-ajax-url=\"/ajax/SIF2/card/469/\" data-ajax-title=\"SR Watanabe You Pure \u300cLet&#39;s Have Lots of Fun!\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/469SR-Watanabe-You-Pure-\u697d\u3057\u3080\u3067\u3042\u308a\u307e\u3059-g0qxFu.png\"  alt=\"SR Watanabe You Pure \u300cLet&#39;s Have Lots of Fun!\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/469SR-Watanabe-You-Pure-\u697d\u3057\u3080\u3067\u3042\u308a\u307e\u3059-SSfymc.png\"  alt=\"SR Watanabe You Pure \u300cLet&#39;s Have Lots of Fun!\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Watanabe You  <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Pure\" height=\"30\"> <br><small class=\"text-muted\">Let&#39;s Have Lots of Fun!</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"468\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/468/SR-Sonoda-Umi-Smile-My-Love-to-You/\" data-ajax-url=\"/ajax/SIF2/card/468/\" data-ajax-title=\"SR Sonoda Umi Smile \u300cMy Love to You\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/468SR-Sonoda-Umi-Smile-\u611b\u3092\u3042\u306a\u305f\u306b-I5zsf7.png\"  alt=\"SR Sonoda Umi Smile \u300cMy Love to You\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/468SR-Sonoda-Umi-Smile-\u611b\u3092\u3042\u306a\u305f\u306b-zMTazP.png\"  alt=\"SR Sonoda Umi Smile \u300cMy Love to You\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Sonoda Umi  <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Smile\" height=\"30\"> <br><small class=\"text-muted\">My Love to You</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"471\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/471/SR-Arashi-Chisato-Cool-I-m-Ready/\" data-ajax-url=\"/ajax/SIF2/card/471/\" data-ajax-title=\"SR Arashi Chisato Cool \u300cI\u2019m Ready \u266a\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/471SR-Arashi-Chisato-Cool-\u6e96\u5099\u306f\u30de\u30eb\u30c3-P4hOsJ.png\"  alt=\"SR Arashi Chisato Cool \u300cI\u2019m Ready \u266a\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/471SR-Arashi-Chisato-Cool-\u6e96\u5099\u306f\u30de\u30eb\u30c3-2Fsz93.png\"  alt=\"SR Arashi Chisato Cool \u300cI\u2019m Ready \u266a\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Super rare\" height=\"30\">  Arashi Chisato  <img src=\"//i.idol.st/static/img/i_sif2_attribute/cool.png?0.8-subunits\" alt=\"Cool\" height=\"30\"> <br><small class=\"text-muted\">I\u2019m Ready \u266a</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n\n  \n\n  \n  \n\n  \n  <div class=\"col-md-4\" data-item=\"SIF2/card\" data-item-id=\"467\"\n       >\n\n    \n    \n\n      <div class=\"text-center top-item\" style=\"padding: 20px;\">\n  \n  <a href=\"/SIF2/card/467/UR-Yoneme-Mei-Pure-Perfect-Day-at-the-Cat-Cafe/\" data-ajax-url=\"/ajax/SIF2/card/467/\" data-ajax-title=\"UR Yoneme Mei Pure \u300cPerfect Day at the Cat Cafe\u300d\" class=\"a-nodifference\">\n    \n    \n    <img src=\"//i.idol.st/u/sif2/card/art/467UR-Yoneme-Mei-Pure-\u732b\u30ab\u30d5\u30a7\u65e5\u548c-4Q5Pi2.png\"  alt=\"UR Yoneme Mei Pure \u300cPerfect Day at the Cat Cafe\u300d\" class=\"sif2-card-image normal\"><img src=\"//i.idol.st/u/sif2/card/art/467UR-Yoneme-Mei-Pure-\u732b\u30ab\u30d5\u30a7\u65e5\u548c-QIGBMm.png\"  alt=\"UR Yoneme Mei Pure \u300cPerfect Day at the Cat Cafe\u300d\" class=\"sif2-card-image idolized\">\n    \n    \n    <h3 class=\"SIF2/card-name\">\n      <img src=\"//i.idol.st/static/img/i_sif2_rarity/UR.png?0.8-subunits\" alt=\"Ultra rare\" height=\"30\">  Yoneme Mei  <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Pure\" height=\"30\"> <br><small class=\"text-muted\">Perfect Day at the Cat Cafe</small>\n      \n    </h3>\n    \n    \n  </a>\n  \n</div>\n\n      \n\n    \n\n  </div>\n\n  \n  \n</div><div class=\"row items\">\n  \n\n  \n\n</div>\n<div id=\"SIF2/card-end-of-page-2\"></div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div id=\"load_more\" class=\"padding20 text-center pagination-pages\" data-next-page=\"3\">\n  \n  <nav>\n    <ul class=\"pagination pagination-sm\">\n      <li class=\"\"><a href=\"/SIF2/cards/?page=1\">&laquo;</a></li>\n      \n      <li class=\"\"><a href=\"/SIF2/cards/?page=1\">1</a></li>\n      \n      <li class=\"active\"><a href=\"/SIF2/cards/?page=2\">2</a></li>\n      \n      <li class=\"\"><a href=\"/SIF2/cards/?page=3\">3</a></li>\n      \n      <li class=\"disabled\"><a href=\"#\">...</a></li>\n      \n      <li class=\"\"><a href=\"/SIF2/cards/?page=41\">41</a></li>\n      \n      <li class=\"\"><a href=\"/SIF2/cards/?page=3\">&raquo;</a></li>\n    </ul>\n  </nav>\n  \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n  var merged_fields = {\"idol_i_unit_i_subunit\": [\"idol\", \"i_unit\", \"i_subunit\"]};\n  \n</script>\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/SIF2/card/480", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 301, "message": "Moved Permanently"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:46 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language"], "X-Frame-Options": ["SAMEORIGIN"], "Location": ["https://idol.st/ajax/SIF2/card/480/"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=H%2Fdz59X7B8vTmB%2BpZpKOPCl1xPMf0NBlbBhwqllfEje0jNCQNkN5kVQQEvkcUALnpkS%2BeShS6MLlkHRjEVRPCw1MbVEiAOgusr3%2B7g%2B4ZuPVp07DkYM8g3iP\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d8717f3c6e4d24-GRU"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {}}}, {"request": {"method": "GET", "uri": "https://idol.st/ajax/SIF2/card/480/", "body": null, "headers": {"Host": ["idol.st"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:46 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=6ZMCwTshTApGSGwshe0Ia5NX44j5TD2ZB7Dg7c4hWDhpRDifXlQA5IJMMeBCu1TmzafgME2UXCF0epqpSiiG7n5dcJ%2FFQQAgE%2FpcU22zFVMLtcMjMbMZHDkG\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d871810cf34d24-GRU"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d | Cards list | SIF2 MIRACLE LIVE | Games | Idol Story - Love Live!</span>\n  <span class=\"head-for-modal-description\">Welcome to the home of Love Livers!</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-SIF2/card_item_ajax item-page-title item-page-title-SIF2/card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/games/\">\n      Games\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/games/#SIF2\">\n      SIF2 MIRACLE LIVE\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/SIF2/cards/\">\n      Cards list\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\n    \n    \n</h1>\n</div>\n\n\n\n\n\n<div class=\"item-info SIF2/card-info\">\n  <div class=\"text-center top-item\" style=\"padding: 20px;\">\n    \n    <a href=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-Gg7SJy.png\" target=\"_blank\"><img src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-Gg7SJy.png\" data-original-src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-VrMbaw.png\"  alt=\"SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\" class=\"sif2-card-image normal\" style=\"width: 50%;\"></a><a href=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-m4tvRl.png\" target=\"_blank\"><img src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-m4tvRl.png\" data-original-src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-ZREcje.png\"  alt=\"SR Shibuya Kanon Smile \u300cGlittering Winter Sky\u300d\" class=\"sif2-card-image idolized\" style=\"width: 50%;\"></a>\n    \n  </div>\n  <br>\n  \n<div class=\"flex-table with-top-border about-flex-table\" role=\"table\">\n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"versions\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-icons-list\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Server availability</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <div class=\"list-wrapper with-bullet\"><ul><li data-list-key=\"JP\" > <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"Japanese version\" height=\"30\"> <span>Japanese version</span> </li></ul></div>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"jp_release_date\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"Japanese version - Release date\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Japanese version - Release date</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <span class=\"timezone\" data-to-timezone=\"Local time\"  >\n        <span class=\"datetime\">November 01, 2023 00:00:00 +0000</span>\n        (<span class=\"current_timezone\">UTC</span>)\n    </span>\n     \n    <br>\n    <small class=\"text-muted\"><span class=\"timezone\" data-timeago=\"true\" style=\"display: none;\">\n        <span class=\"datetime\">November 01, 2023 00:00:00 +0000</span>\n    </span></small>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"name\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-id\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Title</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Glittering Winter Sky</span>  <div class=\"text-muted\" lang=\"ja\"> <img src=\"//i.idol.st/static/img/language/ja.png?0.8-subunits\" alt=\"\u30bf\u30a4\u30c8\u30eb\" height=\"20\"> <span>\u714c\u3081\u304f\u51ac\u5929</span> </div>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"origin\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-trade\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Origin</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Exchange</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"rarity\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_sif2_rarity/SR.png?0.8-subunits\" alt=\"Rarity\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Rarity</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Super rare</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"attribute\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Attribute\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Attribute</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Smile</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-idol\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Idol</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">Shibuya Kanon<br>\n            <a href=\"/idol/118/Shibuya-Kanon/\" target=\"_blank\" data-ajax-url=\"/ajax/idol/118/\" data-ajax-title=\"Shibuya Kanon\" data-ajax-handle-form=\"true\">\n                Open idol\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/idol/118/Shibuya-Kanon/\" target=\"_blank\" data-ajax-url=\"/ajax/idol/118/\" data-ajax-title=\"Shibuya Kanon\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/idol/118Shibuya-Kanon-v7t9EL.png\" alt=\"Open idol\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_unit\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_unit/Liella.png?0.8-subunits\" alt=\"Unit\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Unit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>Liella!</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_subunit\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <img src=\"//i.idol.st/static/img/i_subunit/CatChu.png?0.8-subunits\" alt=\"Subunit\" />\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Subunit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>CatChu!</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"idol__i_year\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-education\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">School year</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>3rd year</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"cameos\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-idol\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Cameos</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Cameos</strong>\n        \n\n        <div class=\"field-content text-center\">\n          \n          \n<div class=\"alert alert-info\">\n  <div class=\"row\">\n    <div class=\"col-sm-2 text-center hidden-xs\">\n      <i class=\"flaticon-about fontx2\"></i>\n    </div>\n    <div class=\"col-sm-7\">\n      <h4><b>This section is temporarily disabled due to high traffic</b></h4>\n      <p>\n            You can can <a href=\"/signup/\" target=\"_blank\">signup <i class=\"flaticon-link\"></i></a>\n            or <a href=\"/login/\" target=\"_blank\">login <i class=\"flaticon-link\"></i></a> to access it.<br><i class=\"fontx0-8\">If you like Idol Story, please consider donating. This will help us cover the costs of the servers and allow us to keep it running for free and with minimal ads.</i></p>\n    </div>\n    \n<div class=\"col-sm-3 hidden-xs\">\n  <a href=\"/donate/\" class=\"btn btn-main btn-lg btn-block\" target=\"_blank\">\n    Donate\n    <i class=\"flaticon-heart\"></i>\n  </a>\n</div>\n\n  </div>\n</div><br>\n\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"art\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Art</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-VrMbaw.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-Gg7SJy.png\" alt=\"Art\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"art_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Art (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-ZREcje.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/sif2/card/art/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-m4tvRl.png\" alt=\"Art (Idolized)\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"transparent\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Transparent</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/sif2/card/transparent/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-VzOHZl.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/sif2/card/transparent/tthumb/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-rAi5Zw.png\" alt=\"Transparent\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"transparent_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Transparent (Idolized)</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          <a href=\"//i.idol.st/u/sif2/card/transparent/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-YRWg45.png\" target=\"_blank\" ><img class=\"image\" src=\"//i.idol.st/u/sif2/card/transparent/tthumb/480SR-Shibuya-Kanon-Smile-\u714c\u3081\u304f\u51ac\u5929-FnjhMY.png\" alt=\"Transparent (Idolized)\" ></a>\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"background\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Background</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">Background<br>\n            <a href=\"/background/1733/Background/\" target=\"_blank\" data-ajax-url=\"/ajax/background/1733/\" data-ajax-title=\"Background\" data-ajax-handle-form=\"true\">\n                Open background\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/background/1733/Background/\" target=\"_blank\" data-ajax-url=\"/ajax/background/1733/\" data-ajax-title=\"Background\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/background/tthumb/1733Background-kiU6hW.png\" alt=\"Open background\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"background_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-pictures\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Background - Idolized</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"text_with_link_wrapper\">\n        <span class=\"text_with_link\">Background<br>\n            <a href=\"/background/1733/Background/\" target=\"_blank\" data-ajax-url=\"/ajax/background/1733/\" data-ajax-title=\"Background\" data-ajax-handle-form=\"true\">\n                Open background - idolized\n                <i class=\"flaticon-link fontx0-8\"></i>\n            </a>\n        </span>\n        <a href=\"/background/1733/Background/\" target=\"_blank\" data-ajax-url=\"/ajax/background/1733/\" data-ajax-title=\"Background\" data-ajax-handle-form=\"true\">\n          <img src=\"//i.idol.st/u/background/tthumb/1733Background-kiU6hW.png\" alt=\"Open background - idolized\" class=\"text_with_link_image\">\n        </a>\n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"description\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hashtag\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Visual description</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Visual description</strong>\n        \n\n        <div class=\"field-content text-left\">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/suggestededits/add/sif2card/?id=480&amp;reason=description\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-edit\"></i>  <span>Add visual description</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"description_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hashtag\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Visual description - Idolized</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Visual description - Idolized</strong>\n        \n\n        <div class=\"field-content text-left\">\n          \n          \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n    <a href=\"/suggestededits/add/sif2card/?id=480&amp;reason=description_idolized\" class=\"btn btn-md btn-link-muted btn-lines \" target=\"_blank\"  >\n        <i class=\"flaticon-edit\"></i>  <span>Add visual description - idolized</span>   \n    </a>\n    \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"statistics\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-statistics\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title visible-xs\">\n        <strong class=\"verbose-name\">Statistics</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm spread-across\">\n        \n        <strong class=\"verbose-name hidden-xs long-text-title\">Statistics</strong>\n        \n\n        <div class=\"field-content \">\n          \n          \n    <div class=\"flex-table with-border table-rounded text-center\">\n      \n    <div class=\"flex-tr\">\n    <div class=\"flex-td flex-collapse-sm\"></div>\n     \n    <div class=\"flex-th flex-collapse-sm\">  <span>Level 1</span> </div>\n     \n    <div class=\"flex-th flex-collapse-sm\">  <span>Level 60</span> </div>\n     \n    <div class=\"flex-th flex-collapse-sm\">  <span>Level 80</span> </div>\n    </div>\n     \n    <div class=\"flex-tr\">\n    <div class=\"flex-th flex-collapse-sm\"> <img src=\"//i.idol.st/static/img/i_sif2_attribute/smile.png?0.8-subunits\" alt=\"Statistics\" height=\"30\"> <span>Smile</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>3374</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>4200</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>4667</span> </div>\n    </div>\n     \n    <div class=\"flex-tr\">\n    <div class=\"flex-th flex-collapse-sm\"> <img src=\"//i.idol.st/static/img/i_sif2_attribute/pure.png?0.8-subunits\" alt=\"Statistics\" height=\"30\"> <span>Pure</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>2559</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>3186</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>3540</span> </div>\n    </div>\n     \n    <div class=\"flex-tr\">\n    <div class=\"flex-th flex-collapse-sm\"> <img src=\"//i.idol.st/static/img/i_sif2_attribute/cool.png?0.8-subunits\" alt=\"Statistics\" height=\"30\"> <span>Cool</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>2497</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>3108</span> </div>\n     \n    <div class=\"flex-td flex-collapse-sm\">  <span>3454</span> </div>\n    </div>\n    \n    </div>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"hp\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hp\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">HP</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>3</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"hp_idolized\" role=\"row\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-hp\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">HP - Idolized</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n            <span>4</span> \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_suggest_edit\" role=\"row\"\n         \n          data-button=\"suggest_edit\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-edit\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Suggest edit</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"/suggestededits/add/sif2card/?id=480\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"suggest_edit\" title=\"Suggest edit\">\n        <i class=\"flaticon-edit\"></i>  <span>Suggest edit</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_comments\" role=\"row\"\n         \n          data-button=\"comments\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-comments\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Comments</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n    <a href=\"https://idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/#disqus_thread\" class=\" btn btn-secondary btn-lines btn-lg\" target=\"_blank\"  data-btn-name=\"comments\" title=\"Comments\">\n        <i class=\"flaticon-comments\"></i>  <span>Comments</span>   \n    </a>\n    \n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n    \n    \n    \n    <div class=\"flex-tr \"\n         data-field=\"button_share\" role=\"row\"\n         \n          data-button=\"share\"\n         >\n\n      \n\n      \n      <div class=\"flex-td about-flex-td-icon\">\n        \n        <i class=\"flaticon-link\"></i>\n        \n      </div>\n\n      \n\n      <div class=\"flex-th about-flex-th-title \">\n        <strong class=\"verbose-name\">Share</strong>\n        \n      </div>\n\n      \n\n      <div class=\"flex-td about-flex-td-content flex-collapse-sm \">\n        \n\n        <div class=\"field-content \">\n          \n          \n\n<div class=\"btn-group\">\n<a href=\"https://idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-copy-to-clipboard=\"https://idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/\" data-toggle=\"tooltip\" title=\"Copy\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/share-copy.png?0.8-subunits\" alt=\"Copy\" />\n</a>\n<a href=\"http://twitter.com/share?text=SR%20Shibuya%20Kanon%20Smile%20%E3%80%8CGlittering%20Winter%20Sky%E3%80%8D&url=https%3A//idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/&hashtags=LoveLive,\u30e9\u30d6\u30e9\u30a4\u30d6,\u30b9\u30af\u30b9\u30bf,SIFAS,LLAS,&via=idoldotst\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Twitter\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/twitter.png?0.8-subunits\" alt=\"Twitter\" />\n</a>\n<a href=\"http://www.facebook.com/sharer/sharer.php?u=https%3A//idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Facebook\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/facebook.png?0.8-subunits\" alt=\"Facebook\" />\n</a>\n<a href=\"http://www.reddit.com/submit?url=https%3A//idol.st/SIF2/card/480/SR-Shibuya-Kanon-Smile-Glittering-Winter-Sky/&title=SR%20Shibuya%20Kanon%20Smile%20%E3%80%8CGlittering%20Winter%20Sky%E3%80%8D\" class=\"btn share-button btn-secondary btn-lines btn-lg\" target=\"_blank\" data-toggle=\"tooltip\" title=\"Reddit\" data-trigger=\"hover\" data-placement=\"top\" data-container=\"body\">\n  <img src=\"//i.idol.st/static/img/links/reddit.png?0.8-subunits\" alt=\"Reddit\" />\n</a>\n</div>\n\n          \n          \n        </div>\n\n        <div class=\"field-buttons\">\n          \n        </div>\n\n      </div>\n\n    </div>\n    \n    \n    \n    \n</div>\n\n\n</div>\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}]}