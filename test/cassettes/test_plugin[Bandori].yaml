{"version": 1, "interactions": [{"request": {"method": "GET", "uri": "https://bandori.party/ajax/cards/?page=2", "body": null, "headers": {}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:54 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=wIj46Q%2BA%2BlmGXlpr%2B1OpOjIi5AUzEyiqujF8WgBGBKwz0hdPFBlZGkT7XTmHUMe5pI4BMRdbcy8WQp5XLRvcDXmvFEbmlyfM%2FSNkALwBoOuiafRMV%2FHPDPdyp0rRaFX5\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d871b0b91331e9-MIA"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">Cards list | Girls Band Party | Bandori Party - BanG Dream! Girls Band Party</span>\n  <span class=\"head-for-modal-description\">All the cards! Search by title, skill name, ... and filter by member / band, origin, gacha type, rarity, attribute, skill, server availability to find all the details you need about the cards from BanG Dream! Girls Band Party. -- The BanG Dream! Girls Band Party Database &amp; Community</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-card_list_ajax list-page-title list-page-title-card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/girlsbandparty/\">\n      Girls Band Party\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    Cards list\n    \n    \n</h1>\n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"row items list-items-card\" id=\"card-page-2\" data-page-number=\"2\">\n  \n    \n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4315\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/\" data-ajax-url=\"/ajax/card/4315/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words\" class=\"card card-Cool card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-t2XQkD.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-jEwIWb.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Ran Mitake</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/2.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4315&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words&amp;card_item_url=/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&amp;card_image_url=//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-7Nxvsm.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4315&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words&amp;card_item_url=/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&amp;card_image_url=//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-7Nxvsm.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4314\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4314/Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile/\" data-ajax-url=\"/ajax/card/4314/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 Moca Aoba - Cool - Your Sunset-Illuminated Profile\" class=\"card card-Cool card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4314Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile-4HjIq2.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4314Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile-sNIaWe.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Moca Aoba</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/2.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4314&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Moca Aoba - Cool - Your Sunset-Illuminated Profile&amp;card_item_url=/card/4314/Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile/&amp;card_image_url=//i.bandori.party/u/c/4314Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile-eqs0Fb.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4314&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Moca Aoba - Cool - Your Sunset-Illuminated Profile&amp;card_item_url=/card/4314/Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile/&amp;card_image_url=//i.bandori.party/u/c/4314Moca-Aoba-Cool-Your-Sunset-Illuminated-Profile-eqs0Fb.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n</div><div class=\"row items\">\n    \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4312\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4312/Tomoe-Udagawa-Cool-Messages-From-The-Roof/\" data-ajax-url=\"/ajax/card/4312/\" data-ajax-title=\"\u2605\u2605\u2605\u2605 Tomoe Udagawa - Cool - Messages From The Roof\" class=\"card card-Cool card-rarity-4 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4312Tomoe-Udagawa-Cool-Messages-From-The-Roof-urSx3b.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4312Tomoe-Udagawa-Cool-Messages-From-The-Roof-QQSj2V.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Tomoe Udagawa</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/4.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/2.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4312&amp;card_unicode=\u2605\u2605\u2605\u2605 Tomoe Udagawa - Cool - Messages From The Roof&amp;card_item_url=/card/4312/Tomoe-Udagawa-Cool-Messages-From-The-Roof/&amp;card_image_url=//i.bandori.party/u/c/4312Tomoe-Udagawa-Cool-Messages-From-The-Roof-4wJTgG.png&amp;card_i_rarity=4&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4312&amp;card_unicode=\u2605\u2605\u2605\u2605 Tomoe Udagawa - Cool - Messages From The Roof&amp;card_item_url=/card/4312/Tomoe-Udagawa-Cool-Messages-From-The-Roof/&amp;card_image_url=//i.bandori.party/u/c/4312Tomoe-Udagawa-Cool-Messages-From-The-Roof-4wJTgG.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4311\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4311/Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People/\" data-ajax-url=\"/ajax/card/4311/\" data-ajax-title=\"\u2605\u2605\u2605 Tsugumi Hazawa - Happy - The Feelings of Two People\" class=\"card card-Happy card-rarity-3 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4311Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People-UODYim.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4311Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People-QiEGeO.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Tsugumi Hazawa</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/3.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/4.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4311&amp;card_unicode=\u2605\u2605\u2605 Tsugumi Hazawa - Happy - The Feelings of Two People&amp;card_item_url=/card/4311/Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People/&amp;card_image_url=//i.bandori.party/u/c/4311Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People-qgDLGE.png&amp;card_i_rarity=3&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4311&amp;card_unicode=\u2605\u2605\u2605 Tsugumi Hazawa - Happy - The Feelings of Two People&amp;card_item_url=/card/4311/Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People/&amp;card_image_url=//i.bandori.party/u/c/4311Tsugumi-Hazawa-Happy-The-Feelings-of-Two-People-qgDLGE.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n</div><div class=\"row items\">\n    \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4310\">\n    \n    \n    \n\n<div class=\"card-wrapper\">\n  <a href=\"/card/4310/Himari-Uehara-Happy-Eyes-Flickering-With-Anxiety/\" data-ajax-url=\"/ajax/card/4310/\" data-ajax-title=\"\u2605\u2605 Himari Uehara - Happy - Eyes Flickering With Anxiety\" class=\"card card-Happy card-rarity-2\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4310Himari-Uehara-Happy-\u4e0d\u5b89\u306b\u63fa\u308c\u308b\u77b3-O7aGfN.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Himari Uehara</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/2.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/4.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4310&amp;card_unicode=\u2605\u2605 Himari Uehara - Happy - Eyes Flickering With Anxiety&amp;card_item_url=/card/4310/Himari-Uehara-Happy-Eyes-Flickering-With-Anxiety/&amp;card_image_url=//i.bandori.party/u/c/4310Himari-Uehara-Happy-\u4e0d\u5b89\u306b\u63fa\u308c\u308b\u77b3-gROMWm.png&amp;card_i_rarity=2&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4310&amp;card_unicode=\u2605\u2605 Himari Uehara - Happy - Eyes Flickering With Anxiety&amp;card_item_url=/card/4310/Himari-Uehara-Happy-Eyes-Flickering-With-Anxiety/&amp;card_image_url=//i.bandori.party/u/c/4310Himari-Uehara-Happy-\u4e0d\u5b89\u306b\u63fa\u308c\u308b\u77b3-gROMWm.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4309\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4309/Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President/\" data-ajax-url=\"/ajax/card/4309/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 Tsugumi Hazawa - Happy - Haneoka&#39;s Brilliant Student Council President\" class=\"card card-Happy card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4309Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President-fUCvWN.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4309Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President-ONVgsA.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Tsugumi Hazawa</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/4.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4309&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Tsugumi Hazawa - Happy - Haneoka&#39;s Brilliant Student Council President&amp;card_item_url=/card/4309/Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President/&amp;card_image_url=//i.bandori.party/u/c/4309Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President-DjSbYk.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4309&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Tsugumi Hazawa - Happy - Haneoka&#39;s Brilliant Student Council President&amp;card_item_url=/card/4309/Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President/&amp;card_image_url=//i.bandori.party/u/c/4309Tsugumi-Hazawa-Happy-Haneoka-s-Brilliant-Student-Council-President-DjSbYk.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n</div><div class=\"row items\">\n    \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4308\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4308/LOCK-Happy-Caught-Red-Handed/\" data-ajax-url=\"/ajax/card/4308/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 LOCK - Happy - Caught Red-Handed!?\" class=\"card card-Happy card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4308LOCK-Happy-Caught-Red-Handed-rP1orO.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4308LOCK-Happy-Caught-Red-Handed-CfaG8F.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">LOCK</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/4.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4308&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 LOCK - Happy - Caught Red-Handed!?&amp;card_item_url=/card/4308/LOCK-Happy-Caught-Red-Handed/&amp;card_image_url=//i.bandori.party/u/c/4308LOCK-Happy-Caught-Red-Handed-vrsiAH.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4308&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 LOCK - Happy - Caught Red-Handed!?&amp;card_item_url=/card/4308/LOCK-Happy-Caught-Red-Handed/&amp;card_image_url=//i.bandori.party/u/c/4308LOCK-Happy-Caught-Red-Handed-vrsiAH.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4307\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4307/Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway/\" data-ajax-url=\"/ajax/card/4307/\" data-ajax-title=\"\u2605\u2605\u2605\u2605 Arisa Ichigaya - Happy - You Can&#39;t Just Runaway!\" class=\"card card-Happy card-rarity-4 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4307Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway-arAB32.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4307Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway-25KvQP.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Arisa Ichigaya</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/4.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/4.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4307&amp;card_unicode=\u2605\u2605\u2605\u2605 Arisa Ichigaya - Happy - You Can&#39;t Just Runaway!&amp;card_item_url=/card/4307/Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway/&amp;card_image_url=//i.bandori.party/u/c/4307Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway-nh69U3.png&amp;card_i_rarity=4&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4307&amp;card_unicode=\u2605\u2605\u2605\u2605 Arisa Ichigaya - Happy - You Can&#39;t Just Runaway!&amp;card_item_url=/card/4307/Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway/&amp;card_image_url=//i.bandori.party/u/c/4307Arisa-Ichigaya-Happy-You-Can-t-Just-Runaway-nh69U3.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n</div><div class=\"row items\">\n    \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4306\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4306/Misaki-Okusawa-Cool-Exhausted-After-the-Meeting/\" data-ajax-url=\"/ajax/card/4306/\" data-ajax-title=\"\u2605\u2605\u2605 Misaki Okusawa - Cool - Exhausted After the Meeting\" class=\"card card-Cool card-rarity-3 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4306Misaki-Okusawa-Cool-Exhausted-After-the-Meeting-K98NBL.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4306Misaki-Okusawa-Cool-Exhausted-After-the-Meeting-ZreaC1.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Misaki Okusawa</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/3.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/2.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4306&amp;card_unicode=\u2605\u2605\u2605 Misaki Okusawa - Cool - Exhausted After the Meeting&amp;card_item_url=/card/4306/Misaki-Okusawa-Cool-Exhausted-After-the-Meeting/&amp;card_image_url=//i.bandori.party/u/c/4306Misaki-Okusawa-Cool-Exhausted-After-the-Meeting-9AlBP3.png&amp;card_i_rarity=3&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4306&amp;card_unicode=\u2605\u2605\u2605 Misaki Okusawa - Cool - Exhausted After the Meeting&amp;card_item_url=/card/4306/Misaki-Okusawa-Cool-Exhausted-After-the-Meeting/&amp;card_image_url=//i.bandori.party/u/c/4306Misaki-Okusawa-Cool-Exhausted-After-the-Meeting-9AlBP3.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4305\">\n    \n    \n    \n\n<div class=\"card-wrapper\">\n  <a href=\"/card/4305/Moca-Aoba-Power-Detective-Moca-chan-Senpai/\" data-ajax-url=\"/ajax/card/4305/\" data-ajax-title=\"\u2605\u2605 Moca Aoba - Power - Detective Moca-chan Senpai\" class=\"card card-Power card-rarity-2\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4305Moca-Aoba-Power-Detective-Moca-chan-Senpai-GT4Egh.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Moca Aoba</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/2.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/1.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4305&amp;card_unicode=\u2605\u2605 Moca Aoba - Power - Detective Moca-chan Senpai&amp;card_item_url=/card/4305/Moca-Aoba-Power-Detective-Moca-chan-Senpai/&amp;card_image_url=//i.bandori.party/u/c/4305Moca-Aoba-Power-Detective-Moca-chan-Senpai-8ZQbRI.png&amp;card_i_rarity=2&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4305&amp;card_unicode=\u2605\u2605 Moca Aoba - Power - Detective Moca-chan Senpai&amp;card_item_url=/card/4305/Moca-Aoba-Power-Detective-Moca-chan-Senpai/&amp;card_image_url=//i.bandori.party/u/c/4305Moca-Aoba-Power-Detective-Moca-chan-Senpai-8ZQbRI.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n</div><div class=\"row items\">\n    \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4304\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4304/MASKING-Pure-Even-If-It-s-Hell-There/\" data-ajax-url=\"/ajax/card/4304/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 MASKING - Pure - Even If It&#39;s Hell There\" class=\"card card-Pure card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4304MASKING-Pure-Even-If-It-s-Hell-There-bAgh8H.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4304MASKING-Pure-Even-If-It-s-Hell-There-VZU94t.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">MASKING</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/3.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4304&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 MASKING - Pure - Even If It&#39;s Hell There&amp;card_item_url=/card/4304/MASKING-Pure-Even-If-It-s-Hell-There/&amp;card_image_url=//i.bandori.party/u/c/4304MASKING-Pure-Even-If-It-s-Hell-There-Jjpygw.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4304&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 MASKING - Pure - Even If It&#39;s Hell There&amp;card_item_url=/card/4304/MASKING-Pure-Even-If-It-s-Hell-There/&amp;card_image_url=//i.bandori.party/u/c/4304MASKING-Pure-Even-If-It-s-Hell-There-Jjpygw.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n    \n  \n    \n    \n  <div class=\"col-md-6\" data-item=\"card\" data-item-id=\"4303\">\n    \n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <a href=\"/card/4303/CHU\u00b2-Pure-Thirsting-Smouldering/\" data-ajax-url=\"/ajax/card/4303/\" data-ajax-title=\"\u2605\u2605\u2605\u2605\u2605 CHU\u00b2 - Pure - Thirsting, Smouldering\" class=\"card card-Pure card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4303CHU\u00b2-Pure-Thirsting-Smouldering-ziPzu9.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4303CHU\u00b2-Pure-Thirsting-Smouldering-ufp30y.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">CHU\u00b2</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/3.png?38-rarity5-frame-2');\"></div>\n  </a>\n</div>\n\n\n\n\n    \n\n<div class=\"below-item-buttons btn-group btn-group-justified\">\n  \n  \n  <a href=\"/signup/?next=/collectiblecards/add/?card_id=4303&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 CHU\u00b2 - Pure - Thirsting, Smouldering&amp;card_item_url=/card/4303/CHU\u00b2-Pure-Thirsting-Smouldering/&amp;card_image_url=//i.bandori.party/u/c/4303CHU\u00b2-Pure-Thirsting-Smouldering-OsY2oh.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-add\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your cards\n      \n    </span>\n    \n    \n  </a>\n  \n  \n  \n  <a href=\"/signup/?next=/favoritecards/add/?card_id=4303&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 CHU\u00b2 - Pure - Thirsting, Smouldering&amp;card_item_url=/card/4303/CHU\u00b2-Pure-Thirsting-Smouldering/&amp;card_image_url=//i.bandori.party/u/c/4303CHU\u00b2-Pure-Thirsting-Smouldering-OsY2oh.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n     class=\"btn btn-secondary btn-lines \"\n     title=\"Add to your favorite cards\"\n     data-unique-per-owner=\"true\"\n     \n     \n     \n     >\n    <i class=\"flaticon-star\"></i>\n    \n    \n    <span class=\"message\">\n      Add to your favorite cards\n      \n    </span>\n    \n    <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n  </a>\n  \n  \n  \n  \n  \n  \n  \n  \n</div>\n\n\n\n\n\n    \n  </div>\n\n</div><div id=\"card-end-of-page-2\"></div>\n\n\n\n\n\n\n\n\n\n\n\n<div id=\"load_more\" class=\"padding20 text-center pagination-pages\" data-next-page=\"3\">\n  \n  <nav>\n    <ul class=\"pagination pagination-sm\">\n      <li class=\"\"><a href=\"/cards/?page=1\">&laquo;</a></li>\n      \n      <li class=\"\"><a href=\"/cards/?page=1\">1</a></li>\n      \n      <li class=\"active\"><a href=\"/cards/?page=2\">2</a></li>\n      \n      <li class=\"\"><a href=\"/cards/?page=3\">3</a></li>\n      \n      <li class=\"disabled\"><a href=\"#\">...</a></li>\n      \n      <li class=\"\"><a href=\"/cards/?page=137\">137</a></li>\n      \n      <li class=\"\"><a href=\"/cards/?page=3\">&raquo;</a></li>\n    </ul>\n  </nav>\n  \n</div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n</script>\n\n<script>\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}, {"request": {"method": "GET", "uri": "https://bandori.party/ajax/card/4315", "body": null, "headers": {"Host": ["bandori.party"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 301, "message": "Moved Permanently"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:54 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language"], "X-Frame-Options": ["SAMEORIGIN"], "Location": ["https://bandori.party/ajax/card/4315/"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=vD2%2BV%2BZIopb5uygaEP7pZ%2B%2BtIAFwxay5BnvFnGuXZdh58ZnW71%2BnxmYLicLMlWUULc8P%2B%2BUETAj7HT5NNWYjxn0bSqpikxzj0eS6Nk1N3fSmOGXzKjfP%2FMSri5HBabtp\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d871b3cd4600de-GRU"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {}}}, {"request": {"method": "GET", "uri": "https://bandori.party/ajax/card/4315/", "body": null, "headers": {"Host": ["bandori.party"], "Accept": ["*/*"], "Accept-Encoding": ["gzip, deflate, br"], "User-Agent": ["Python/3.12 aiohttp/3.9.1"]}}, "response": {"status": {"code": 200, "message": "OK"}, "headers": {"Date": ["Wed, 29 Nov 2023 05:27:54 GMT"], "Content-Type": ["text/html; charset=utf-8"], "Transfer-Encoding": ["chunked"], "Connection": ["keep-alive"], "Vary": ["Accept-Language, Cookie"], "X-Frame-Options": ["SAMEORIGIN"], "Content-Language": ["en"], "Cache-Control": ["private"], "CF-Cache-Status": ["DYNAMIC"], "Report-To": ["{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=u9J7KcNcRA2rIqmoYi3enOl7xS62jj%2BCWtSqL4ASN2BPk%2BhUYUryR60L6aN9YKfFO2FbP6afDIUrfI7h66YOVdeRYbgRXcAssYDrLUJhMndeU%2BnNKnbK%2FSqifA94%2FQZ2\"}],\"group\":\"cf-nel\",\"max_age\":604800}"], "NEL": ["{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"], "Server": ["cloudflare"], "CF-RAY": ["82d871b59dfe00de-GRU"], "Content-Encoding": ["br"], "alt-svc": ["h3=\":443\"; ma=86400"]}, "body": {"string": "\n\n\n\n<div class=\"head-for-modal hidden\">\n  <span class=\"head-for-modal-title\">\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words | Cards list | Girls Band Party | Bandori Party - BanG Dream! Girls Band Party</span>\n  <span class=\"head-for-modal-description\">The BanG Dream! Girls Band Party Database &amp; Community</span>\n</div>\n\n<div class=\"hidden page-title-wrapper\">\n<h1 class=\"page-title page-title-small page-title-card_item_ajax item-page-title item-page-title-card\">\n  <span class=\"text-muted page-title-prefixes\">\n    <a href=\"/girlsbandparty/\">\n      Girls Band Party\n      </a>\n    <span class=\"separator\">/</span>\n    \n    <a href=\"/cards/\">\n      Cards list\n      </a>\n    <span class=\"separator\">/</span>\n    \n    \n  </span>\n  \n    \n    <i class=\"flaticon-deck\"></i>\n    \n    \u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words\n    \n    \n</h1>\n</div>\n\n\n\n\n\n<div class=\"item-info card-info\">\n  <div class=\"text-center top-item\" style=\"padding: 20px;\">\n    \n    \n\n<div class=\"card-wrapper trainable\">\n  <span class=\"card card-Cool card-rarity-5 trainable\">\n    <figure><div class=\"card-image normal\" style=\"background-image: url('//i.bandori.party/u/c/art/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-t2XQkD.png');\">\n      </div><div class=\"card-image trained\" style=\"background-image: url('//i.bandori.party/u/c/art/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-jEwIWb.png');\">\n      </div></figure>\n    <h2 class=\"member-name\">Ran Mitake</h2>\n    <div class=\"rarity\" style=\"background-image: url('//i.bandori.party/static/img/rarity/5.png?38-rarity5-frame-2');\"></div>\n    <div class=\"attribute\" style=\"background-image: url('//i.bandori.party/static/img/i_attribute/2.png?38-rarity5-frame-2');\"></div>\n  </span>\n</div>\n\n\n\n<div class=\"card-details\" id=\"card-details-4315\">\n  <div class=\"card-statistics\">\n    <div class=\"btn-group\" data-toggle=\"buttons\" data-control-tabs=\"card-4315\">\n      \n      <label class=\"btn btn-link attribute-Cool\" style=\"width: 33.333333333%\" data-open-tab=\"card-4315-min\">\n\t<input type=\"radio\"> Level 1\n      </label>\n      \n      <label class=\"btn btn-link attribute-Cool active\" style=\"width: 33.333333333%\" data-open-tab=\"card-4315-max\">\n\t<input type=\"radio\" checked> Level 60\n      </label>\n      \n      <label class=\"btn btn-link attribute-Cool\" style=\"width: 33.333333333%\" data-open-tab=\"card-4315-trained_max\">\n\t<input type=\"radio\"> Level 70\n      </label>\n      \n    </div>\n    <hr>\n    <div class=\"tab-content\" data-tabs=\"card-4315\">\n      \n      <div class=\"tab-pane\" data-tab=\"card-4315-min\">\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-performance\">Performance</span></div>\n\t  <div class=\"col-xs-2 text-right\">3810</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-performance progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 25.335815933%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-technique\">Technique</span></div>\n\t  <div class=\"col-xs-2 text-right\">3546</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-technique progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 21.789357257%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-visual\">Visual</span></div>\n\t  <div class=\"col-xs-2 text-right\">3440</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-visual progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 23.3426070435%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-Cool\">Overall</span></div>\n\t  <div class=\"col-xs-2 text-right\">10796</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-Cool-light progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 27.2083469846%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n      </div>\n      \n      <div class=\"tab-pane active\" data-tab=\"card-4315-max\">\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-performance\">Performance</span></div>\n\t  <div class=\"col-xs-2 text-right\">9433</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-performance progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 62.7277563506%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-technique\">Technique</span></div>\n\t  <div class=\"col-xs-2 text-right\">8906</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-technique progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 54.7253287452%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-visual\">Visual</span></div>\n\t  <div class=\"col-xs-2 text-right\">8696</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-visual progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 59.0079392007%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-Cool\">Overall</span></div>\n\t  <div class=\"col-xs-2 text-right\">27035</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-Cool-light progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 68.1342775776%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n      </div>\n      \n      <div class=\"tab-pane\" data-tab=\"card-4315-trained_max\">\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-performance\">Performance</span></div>\n\t  <div class=\"col-xs-2 text-right\">13855</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-performance progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 92.1332624019%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-technique\">Technique</span></div>\n\t  <div class=\"col-xs-2 text-right\">13066</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-technique progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 80.2875752734%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-visual\">Visual</span></div>\n\t  <div class=\"col-xs-2 text-right\">12751</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-visual progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 86.5237158173%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n\t<div class=\"row\">\n\t  <div class=\"col-xs-4\"><span class=\"stat-label-Cool\">Overall</span></div>\n\t  <div class=\"col-xs-2 text-right\">39672</div>\n\t  <div class=\"col-xs-6\">\n\t    <div class=\"progress\">\n\t      <div class=\"progress-bar progress-bar-Cool-light progress-bar-rarity-5 progress-bar-striped\"\n\t\t   role=\"progressbar\"\n\t\t   style=\"width: 99.9823584264%;\">\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n\t\n      </div>\n      \n    </div>\n  </div>\n</div>\n\n\n\n    \n  </div>\n  <br>\n  \n\n\n  <table class=\"table about-table\">\n    \n    <tr data-field=\"id\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-id\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">ID</span></th>\n      <td>\n        \n\n\t\n\t4315\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"card_name\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-id\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Title</span></th>\n      <td>\n        \n\n\t\n\t<strong>My Candid and Straightforward Words</strong><br>\n\t<p>\u307e\u3063\u3059\u3050\u4f1d\u3048\u308b\u8a00\u8449</p>\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"member\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-idol\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Member</span></th>\n      <td>\n        \n\n\t\n\t<span class=\"text_with_link\">Ran Mitake<br>\n\t  <a href=\"/member/11/Ran-Mitake/\" target=\"_blank\" data-ajax-url=\"/ajax/member/11/\" data-ajax-title=\"Ran Mitake\">\n\t    Open member\n\t    <i class=\"flaticon-link fontx0-8\"></i>\n\t</a></span>\n\t<img src=\"//i.bandori.party/u/i/m/11Ran-Mitake-0Phk2K.png\" alt=\"Open member\" class=\"text_with_link_image\">\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"cameo_members\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-users\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Cameos</span></th>\n      <td>\n        \n\n\t\n        <div class=\"images\">\n        \n        <a href=\"/member/12/Moca-Aoba/\" class=\"a-nodifference\" target=\"_blank\" data-ajax-url=\"/ajax/member/12/\" data-ajax-title=\"Moca Aoba\">\n\t      <img src=\"//i.bandori.party/u/i/m/12Moca-Aoba-Ov3pCL.png\" alt=\"Moca Aoba\">\n        </a>\n        \n        <a href=\"/member/13/Himari-Uehara/\" class=\"a-nodifference\" target=\"_blank\" data-ajax-url=\"/ajax/member/13/\" data-ajax-title=\"Himari Uehara\">\n\t      <img src=\"//i.bandori.party/u/i/m/13Himari-Uehara-Af23h0.png\" alt=\"Himari Uehara\">\n        </a>\n        \n        <a href=\"/member/14/Tomoe-Udagawa/\" class=\"a-nodifference\" target=\"_blank\" data-ajax-url=\"/ajax/member/14/\" data-ajax-title=\"Tomoe Udagawa\">\n\t      <img src=\"//i.bandori.party/u/i/m/14Tomoe-Udagawa-V4MeiL.png\" alt=\"Tomoe Udagawa\">\n        </a>\n        \n        <a href=\"/member/15/Tsugumi-Hazawa/\" class=\"a-nodifference\" target=\"_blank\" data-ajax-url=\"/ajax/member/15/\" data-ajax-title=\"Tsugumi Hazawa\">\n\t      <img src=\"//i.bandori.party/u/i/m/15Tsugumi-Hazawa-y38Nv3.png\" alt=\"Tsugumi Hazawa\">\n        </a>\n        \n        </div>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"rarity\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-star\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Rarity</span></th>\n      <td>\n        \n\n\t\n\t<img src=\"//i.bandori.party/static/img/star_trained.png\" alt=\"star\"><img src=\"//i.bandori.party/static/img/star_trained.png\" alt=\"star\"><img src=\"//i.bandori.party/static/img/star_trained.png\" alt=\"star\"><img src=\"//i.bandori.party/static/img/star_trained.png\" alt=\"star\"><img src=\"//i.bandori.party/static/img/star_trained.png\" alt=\"star\">\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"attribute\" class=\"\">\n      <td>\n\t\n\t<img src=\"//i.bandori.party/static/img/i_attribute/2.png\" alt=\"Attribute\">\n\t\n      </td>\n      <th><span class=\"verbose-name\">Attribute</span></th>\n      <td>\n        \n\n\t\n\tCool\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"versions\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-world\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Server availability</span></th>\n      <td>\n        \n\n\t\n        <ul>\n          <li>Japanese version</li>\n        </ul>\n    \n      </td>\n    </tr>\n    \n    <tr data-field=\"release_date\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-date\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Release date</span></th>\n      <td>\n        \n\n\t\n\t\n\t<span class=\"timezone\" data-to-timezone=\"Local time\"\n\t      >\n\t  <span class=\"datetime\">October 31, 2023 00:00:00 </span>\n\t  (<span class=\"current_timezone\">UTC</span>)\n\t</span><br>\n\t\n        \n        <small class=\"text-muted\"><span class=\"timezone\" data-timeago=\"true\" style=\"display: none;\">\n\t    <span class=\"datetime\">October 31, 2023 00:00:00 </span>\n\t</span></small>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"skill_name\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-skill\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Skill name</span></th>\n      <td>\n        \n\n\t\n\t<strong>Our Neighbouring Guitars&#39; Cry</strong><br>\n\t<p>\u96a3\u3067\u9cf4\u3089\u3059\u30ae\u30bf\u30fc</p>\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"skill_type\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-healer\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Skill</span></th>\n      <td>\n        \n\n\t\n\t<strong>Life recovery <span class=\"text-muted\">(Score up)</span></strong><br>\n\t<p>Restores life by 750 and boosts score of all notes by 110.0% for the next 5 seconds</p>\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"japanese_skill\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-healer\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Skill</span><br><small class=\"text-muted verbose-name-subtitle\">Japanese</small></br></th>\n      <td>\n        \n\n\t\n\t<strong>\u30e9\u30a4\u30d5\u56de\u5fa9 <span class=\"text-muted\">(\u30b9\u30b3\u30a2\uff35\uff30)</span></strong><br>\n\t<p>\u30e9\u30a4\u30d5\u304c750\u56de\u5fa9\u3057 \u30015\u79d2\u9593\u30b9\u30b3\u30a2\u304c 110.0%UP\u3059\u308b</p>\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"arts\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-pictures\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Art</span></th>\n      <td>\n        \n\n\t\n        <div class=\"images\">\n        \n        <a href=\"//i.bandori.party/u/c/art/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-J5DrZV.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/art/tthumb/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-araKSd.png\" alt=\"Art\">\n        </a>\n        \n        <a href=\"//i.bandori.party/u/c/art/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-oWF7Wh.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/art/a/tthumb/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-4jWLOf.png\" alt=\"Art\">\n        </a>\n        \n        </div>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"transparents\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-pictures\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Transparent</span></th>\n      <td>\n        \n\n\t\n        <div class=\"images\">\n        \n        <a href=\"//i.bandori.party/u/c/transparent/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-k52Zcc.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/transparent/tthumb/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-EVQ2Kh.png\" alt=\"Transparent\">\n        </a>\n        \n        <a href=\"//i.bandori.party/u/c/transparent/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-khMyCA.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/transparent/a/tthumb/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-j8Wf7F.png\" alt=\"Transparent\">\n        </a>\n        \n        </div>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"chibis\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-pictures\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Chibi</span></th>\n      <td>\n        \n\n\t\n        <div class=\"images\">\n        \n        <a href=\"//i.bandori.party/u/cos/chibi/5rlvinRan-Mitake-Cool-chibi-J1Ywcg.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/cos/chibi/5156u-cos-chibi-tiny-5156u-cos-chibi-5rlvinRan-Mitake-Cool-chibi-J1Ywcg-png-Z-uILYaK.png\" alt=\"\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words - Chibi\">\n        </a>\n        \n        <a href=\"//i.bandori.party/u/cos/chibi/6oVTBwRan-Mitake-Cool-chibi-1KnLvt.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/cos/chibi/5157u-cos-chibi-tiny-5157u-cos-chibi-6oVTBwRan-Mitake-Cool-chibi-1KnLvt-png-Y-vBBods.png\" alt=\"\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words - Chibi\">\n        </a>\n        \n        <a href=\"//i.bandori.party/u/cos/chibi/M8MKE7Ran-Mitake-Cool-chibi-g3T8KX.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/cos/chibi/5158u-cos-chibi-tiny-5158u-cos-chibi-M8MKE7Ran-Mitake-Cool-chibi-g3T8KX-png-B-mG1UUQ.png\" alt=\"\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words - Chibi\">\n        </a>\n        \n        </div>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"associated_costume\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-dress\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Costume</span></th>\n      <td>\n        \n\n\t\n\t<a href=\"/costume/2547/Ran-Mitake-My-Candid-and-Straightforward-Words/\" target=\"_blank\" class=\"btn btn-lg btn-secondary\" data-ajax-url=\"/ajax/costume/2547/?from_card\" data-ajax-title=\"Costume - \u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words\">View model</a> \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"images\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-pictures\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Icon</span></th>\n      <td>\n        \n\n\t\n        <div class=\"images\">\n        \n        <a href=\"//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-E6ZaLo.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-7Nxvsm.png\" alt=\"Icon\">\n        </a>\n        \n        <a href=\"//i.bandori.party/u/c/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-ronx9r.png\" class=\"a-nodifference\" target=\"_blank\">\n\t      <img src=\"//i.bandori.party/u/c/a/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-8GL4Kc.png\" alt=\"Icon\">\n        </a>\n        \n        </div>\n        \n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"favorited\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-heart\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Favorite cards</span></th>\n      <td>\n        \n\n\t\n\t<span class=\"text_with_link\">35 favorite cards<br>\n\t  <a href=\"/users/?favorited_card=4315\" target=\"_blank\" data-ajax-url=\"/ajax/users/?favorited_card=4315&amp;ajax_modal_only\" data-ajax-title=\"35 favorite cards\">\n\t    View all\n\t    <i class=\"flaticon-link fontx0-8\"></i>\n\t</a></span>\n\t\n\t\n      </td>\n    </tr>\n    \n    <tr data-field=\"gacha-373\" class=\"\">\n      <td>\n\t\n\t<img src=\"//i.bandori.party/static/img/gacha.png?38-rarity5-frame-2\" alt=\"Gacha\">\n\t\n      </td>\n      <th><span class=\"verbose-name\">Gacha</span><br><small class=\"text-muted verbose-name-subtitle\">Guitar Duet of Double Emotion</small></br></th>\n      <td>\n        \n\n\t\n        <a href=\"/gacha/373/Guitar-Duet-of-Double-Emotion/\" target=\"_blank\" data-ajax-url=\"/ajax/gacha/373/\" data-ajax-title=\"Guitar Duet of Double Emotion\">\n\t  <img src=\"//i.bandori.party/u/g/373Guitar-Duet-of-Double-Emotion-Gacha-OcMiUV.png\" alt=\"Guitar Duet of Double Emotion\">\n        </a>\n\t    \n      </td>\n    </tr>\n    \n    <tr data-field=\"collectedcards\" class=\"\">\n      <td>\n\t\n\t<i class=\"flaticon-deck\"></i>\n\t\n      </td>\n      <th><span class=\"verbose-name\">Collected cards</span></th>\n      <td>\n        \n\n\t\n\t<span class=\"text_with_link\">15 collected cards<br>\n\t  <a href=\"/accounts/?collected_card=4315\" target=\"_blank\" data-ajax-url=\"/ajax/accounts/?collected_card=4315&amp;ajax_modal_only\" data-ajax-title=\"15 collected cards\">\n\t    View all\n\t    <i class=\"flaticon-link fontx0-8\"></i>\n\t</a></span>\n\t\n\t\n      </td>\n    </tr>\n    \n    \n    \n    \n    <tr data-field=\"collectiblecard\">\n      <td>\n        <i class=\"flaticon-add\"></i>\n        \n      </td>\n      <th>\n        Add to your cards\n        \n      </th>\n      <td>\n        <a href=\"/signup/?next=/collectiblecards/add/?card_id=4315&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words&amp;card_item_url=/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&amp;card_image_url=//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-7Nxvsm.png&amp;card_i_rarity=5&amp;next_title=Edit card\" data-btn-name=\"collectiblecard\"\n           class=\"btn btn-secondary btn-lines btn-lg \"\n           title=\"Add to your cards\"\n           data-unique-per-owner=\"true\"\n           \n           \n           >\n          <i class=\"flaticon-add\"></i>\n          \n          \n          \n        </a>\n      </td>\n    </tr>\n    \n    \n    \n    <tr data-field=\"favoritecard\">\n      <td>\n        <i class=\"flaticon-add\"></i>\n        \n      </td>\n      <th>\n        Add to your favorite cards\n        \n      </th>\n      <td>\n        <a href=\"/signup/?next=/favoritecards/add/?card_id=4315&amp;card_unicode=\u2605\u2605\u2605\u2605\u2605 Ran Mitake - Cool - My Candid and Straightforward Words&amp;card_item_url=/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&amp;card_image_url=//i.bandori.party/u/c/4315Ran-Mitake-Cool-My-Candid-and-Straightforward-Words-7Nxvsm.png&amp;next_title=Edit card\" data-btn-name=\"favoritecard\"\n           class=\"btn btn-secondary btn-lines btn-lg \"\n           title=\"Add to your favorite cards\"\n           data-unique-per-owner=\"true\"\n           \n           \n           >\n          <i class=\"flaticon-add\"></i>\n          \n          \n          <span class=\"badge progress-bar-main\" style=\"display: none;\">0</span>\n        </a>\n      </td>\n    </tr>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    <tr data-field=\"comments\">\n      <td><i class=\"flaticon-comments\"></i></td>\n      <th>Comments</th>\n      <td>\n\t<a href=\"https://bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/#disqus_thread\" class=\"btn btn-lg btn-secondary\" target=\"_blank\">\n\t  Comments\n\t</a>\n      </td>\n    </tr>\n    \n    \n    <tr data-field=\"share\">\n      <td><i class=\"flaticon-link\"></i></td>\n      <th>Share</th>\n      <td>\n\t<span class=\"btn-group\">\n\t  \n<a href=\"https://bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/\" class=\"btn share-button btn-secondary btn-lg\" target=\"_blank\" data-copy-to-clipboard=\"https://bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/\">\n  <img src=\"//i.bandori.party/static/img/links/share-copy.png?38-rarity5-frame-2\" alt=\"Copy\" />\n</a>\n<a href=\"http://twitter.com/share?text=%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%85%20Ran%20Mitake%20-%20Cool%20-%20My%20Candid%20and%20Straightforward%20Words&url=https%3A//bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&hashtags=\u30d0\u30f3\u30c9\u30ea,\u30ac\u30eb\u30d1,&via=BandoriParty\" class=\"btn share-button btn-secondary btn-lg\" target=\"_blank\">\n  <img src=\"//i.bandori.party/static/img/links/twitter.png?38-rarity5-frame-2\" alt=\"Twitter\" />\n</a>\n<a href=\"http://www.facebook.com/sharer/sharer.php?u=https%3A//bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/\" class=\"btn share-button btn-secondary btn-lg\" target=\"_blank\">\n  <img src=\"//i.bandori.party/static/img/links/facebook.png?38-rarity5-frame-2\" alt=\"Facebook\" />\n</a>\n<a href=\"http://www.reddit.com/submit?url=https%3A//bandori.party/card/4315/Ran-Mitake-Cool-My-Candid-and-Straightforward-Words/&title=%E2%98%85%E2%98%85%E2%98%85%E2%98%85%E2%98%85%20Ran%20Mitake%20-%20Cool%20-%20My%20Candid%20and%20Straightforward%20Words\" class=\"btn share-button btn-secondary btn-lg\" target=\"_blank\">\n  <img src=\"//i.bandori.party/static/img/links/reddit.png?38-rarity5-frame-2\" alt=\"Reddit\" />\n</a>\n\n\t</span>\n      </td>\n    </tr>\n    \n    \n  </table>\n\n</div>\n\n\n\n\n\n\n\n\n\n\n<script>\n  \n</script>\n\n<script>\n  \n  loadCard();\n  \n  \n      \n      \n      \n      \n</script>\n\n"}}}]}